{
  "Uuid": "31e9bd7e-87f3-466f-ac3e-432fa9028d5e",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Template",
  "ElementResolver": {
    "ResolutionMap": {
      "Maths": {
        "Key": "archilab.Core.Maths",
        "Value": "archilab2023.dll"
      },
      "List.Flatten": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      },
      "Reference": {
        "Key": "Orchid.RevitProject.Datums.Reference",
        "Value": "OrchidRB.dll"
      },
      "List.String": {
        "Key": "List.String",
        "Value": "DynaMEP.dll"
      },
      "Surfaces.Reference": {
        "Key": "archilab.Revit.Geometry.Surfaces",
        "Value": "archilab2023.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nobType = Selection.ObjectType.Element\r\nref =  uidoc.Selection.PickObjects(obType, \"Please select model elements\")\r\n\r\nresult = []\r\nfor ele in ref:\r\n    elementsID = doc.GetElement(ele.ElementId)\r\n    result.Add(elementsID.ToDSType)\r\n\r\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b806c7b3690b44a39df21db9d542cbad",
      "Inputs": [
        {
          "Id": "5c573d2621d847268b53d3a2430c4960",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da04ebaf8332401c8b298ec186a16ad5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "8f03552daf6f45f1b156593a009d9954",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "63411ec48148454a8f9ba0a181fff3ef",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nobType = Selection.ObjectType.Element\r\nref =  uidoc.Selection.PickObject(obType, \"Please select model element\")\r\n\r\nelementID = doc.GetElement(ref.ElementId)\r\nelement = elementID.ToDSType\r\n\r\nOUT = element",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "91bad5f8fd3c42ac96c0880020ea1db1",
      "Inputs": [
        {
          "Id": "424b46d22cb746008a7aa8c22a4bea61",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c0779b512154161be90258047205023",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "d0e4e8d8aaf149c79d5e74e189906fd6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa2f979c6a5d4162a7d6ec0b98cd33ea",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nref = uidoc.Selection.PickObject(ObjectType.Face, \"Select One Face\")\r\nele = uidoc.Document.GetElement(ref.ElementId)\r\nretriEle = ele.GetGeometryObjectFromReference(ref)\r\ngetSurface = retriEle.ToProtoType()\r\ngetSurCuver = retriEle.GetEdgesAsCurveLoops()\r\n\r\nOUT = getSurCuver",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "1d5ea0a6521e4e0db55c849f5638ca66",
      "Inputs": [
        {
          "Id": "e7fe9b1832f44f31b0096f73505a4c79",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f7d0db0cfa154325987e29fb309567ad",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "f0f890775dd8460fbd7de3d039a95f7c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ec2364e7adc94a00b6a91c11cee52be7",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nelement = UnwrapElement(IN[0])\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nOUT = [j.ToProtoType() for i in IN[1] for j in i]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "f605c4859458481292ce590bbe919155",
      "Inputs": [
        {
          "Id": "f64d1fa24ca14843b4cf3f77f1e8cd97",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "090c0761f43447eaad533065ffa730a4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8d8fec4daf2d43e0b6ec46c97f6fc589",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nref = uidoc.Selection.PickObjects(ObjectType.Face, \"Select Multi Face\")\r\nresult = []\r\n\r\nfor i in ref :\r\n\tele = uidoc.Document.GetElement(i.ElementId)\r\n\tretriEle = ele.GetGeometryObjectFromReference(i)\r\n\tgetSurface = retriEle.ToProtoType()\r\n\tgetSurCuver = retriEle.GetEdgesAsCurveLoops()\r\n\tresult.append(getSurCuver)\r\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "f2755cfe73a04bbca9f1250c14b2d79a",
      "Inputs": [
        {
          "Id": "4d4be1a462f54326b54d105356d1376a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b69f074cbfb415ab2621044dbf7aa18",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "64428c539a11447aa465d2a4cdc90ea7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aab30e24702144839506573b9ad64a3e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nelement = UnwrapElement(IN[0])\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nOUT = [k.ToProtoType() for i in IN[1] for j in i for k in j]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a8bf8e1bd3484a76b6c7c1df36353a23",
      "Inputs": [
        {
          "Id": "3a4ce3121d8340faa06ae5a7c109d799",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c05f7edc4b846b68fed5e53fee25751",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d36a4e635c6a4207b145070bfc2ad6f9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\ndef getGeoElement(element): # Get geometry of element.\r\n    geo = []\r\n    opt = Options()\r\n    geoByElement = element.get_Geometry(opt)\r\n    geoEnum = geoByElement.GetEnumerator()\r\n    geoEnum.MoveNext()\r\n    geoNext = geoEnum.Current.GetInstanceGeometry()\r\n    geo = [i for i in geoNext]\r\n    out = []\r\n    for i in geo:\r\n    \tif i.GetType()== Solid and i.Volume > 0:\t\r\n    \t\tout.append(i)\t\r\n\t\tif i.GetType() == GeometryInstance:\t\r\n\t\t\tvar = i.SymbolGeometry\r\n\t\t\tfor j in var:\r\n\t\t\t\tif j.Volume > 0:\r\n\t\t\t\t\tout.append(i)\r\n    return out\r\n\r\n\r\nref = uidoc.Selection.PickObjects(ObjectType.Face, \"Select Multi Face\")\r\nresult = []\r\nlst = []\r\n\r\nfor i in ref :\r\n\tele = uidoc.Document.GetElement(i.ElementId)\r\n\tgeoFraming = getGeoElement(ele)\r\n\r\n\tresult.append(geoFraming)\r\n\t\r\n\r\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e461836530114b6ebf9794d0fba5fe22",
      "Inputs": [
        {
          "Id": "bcc261caa673437a82ef1d896e76eda6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36b56a2bbc4f4eaaa7138b0745dfaf67",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "7e894e8322de4992bfb87037f0cf952d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "368c9765cf1d46d4bfee9e8235c5ff15",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "def testIF(test, iftrue:var[]..[],iffalse:var[]..[])\n{\nreturn = [Imperative]\n{\nif(test)\n{\nreturn = iftrue;\n}\nelse\n{\nreturn = iffalse;\n}\n}\n};",
      "Id": "85af11ccb5774ada99568c42baf83e6d",
      "Inputs": [],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "testIF(test,iftrue,iffalse);",
      "Id": "36a669b68b94461e93d8c9ee477a5b76",
      "Inputs": [
        {
          "Id": "2e94923540824c9f8e2eb0047813e562",
          "Name": "test",
          "Description": "test",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "04ec2017fdc44ee09b3891bf972892cc",
          "Name": "iftrue",
          "Description": "iftrue",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd2362a3783646d188672c46cef834de",
          "Name": "iffalse",
          "Description": "iffalse",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b59a4f3866b3482aad61da2eacae12e5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "(women==0)?0:\n(women<=40?1:(women<=70?3:\n(women<=100?4:(Maths.Round(((women-100)/40)+4)))));",
      "Id": "ed02b04f53f640fba63fd13ae2d5f3b4",
      "Inputs": [
        {
          "Id": "f09b50d57c6f41c487a54411c0c0882f",
          "Name": "women",
          "Description": "women",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c1cc32f431e424797dbcca882344a1a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[WaitFor,Pass][1];",
      "Id": "d1fda400c7fa4d548db9745529a91d41",
      "Inputs": [
        {
          "Id": "1b8b5ea68d5744ef8c273d7bf2983df1",
          "Name": "WaitFor",
          "Description": "WaitFor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b7f86f5c95747fd835ad92e536235ed",
          "Name": "Pass",
          "Description": "Pass",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0740ce8519d643baa3b7da0b4f7334a7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "(10..200..20);",
      "Id": "62d51a6e000d4569ae2e20338b851eb2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "537056610dfc41b1a97fd1c04920a1ab",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "d50ae33d56184ca8b3cef2f9b0f9a091",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "53e664fe081c401599e7bcd8ab0f89a3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "lst = [[1,2],[22,55],[111111,2,3,45,6,7,8]];",
      "Id": "697b9ce9724a43318f909061ef2e88d6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca8cbd2aa35647e0ba26f01f56529c9f",
          "Name": "",
          "Description": "lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "65a19d33225c4a39b982f317f3c53dad",
      "Inputs": [
        {
          "Id": "eb17de1d14ac4676931cf8ce03dc8560",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "965b473b4815411a9f41d1a79c958c04",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.Flatten(x);",
      "Id": "8edf4ecfc00346b09a786681f694c3ca",
      "Inputs": [
        {
          "Id": "05a6eaf345644b83a9946015b762eada",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6a44ed1efe84761864c6783158a4267",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"DSCoreNodes\")\r\nfrom DSCore.List import Flatten\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nelement = UnwrapElement(IN[0])\r\n\r\n#Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\"\"\"Now, You Can Code \"\"\"\r\n\r\n\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = Flatten(IN[0])",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "4640c1db49434b91a6c867f820d5b451",
      "Inputs": [
        {
          "Id": "8af6fd89839c49f3ae5744b7fa15603c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cb61853451154e849c2d3981f89fcc08",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nelement = UnwrapElement(IN[0])\r\n\r\n#Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\"\"\"Now, You Can Code \"\"\"\r\ndef flatten(x):\r\n    result = []\r\n    try:\r\n    \tfor el in x:\r\n        \tif hasattr(el, \"__iter__\") and not isinstance(el, basestring):\r\n        \t    result.extend(flatten(el))\r\n        \telse:\r\n        \t    result.append(el)\r\n    except:\r\n    \tresult = x\r\n    return result\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\nOUT = flatten(IN[0])\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e776708e2a75491a9b18e46f9c6dcb2d",
      "Inputs": [
        {
          "Id": "e22de9bf97134dd2955a2cf66dd191b1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b1f1c1433f734efd9c83f0f3d3d6f69c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport collections\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nelement = UnwrapElement(IN[0])\r\n\r\n#Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\"\"\"Now, You Can Code \"\"\"\r\n\r\ndef flattenList(unflattened_list):\r\n\tif isinstance(unflattened_list,collections.Iterable):\r\n\t\treturn [sub_element for element in unflattened_list for sub_element in flattenList(element)]\r\n\telse:\r\n\t\treturn [unflattened_list]\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\nOUT = flattenList(IN[0])\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "018bcdd3558542f5aaa88b1f722c8bc7",
      "Inputs": [
        {
          "Id": "15f831f14193413bae62f51910f5ee1f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bdd71a1d835941a3a525494eee0676a1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\ndef getGeoElement(element): # Get geometry of element.\r\n    geo = []\r\n    opt = Options()\r\n    geoByElement = element.get_Geometry(opt)\r\n    geoEnum = geoByElement.GetEnumerator()\r\n    geoEnum.MoveNext()\r\n    geoNext = geoEnum.Current.GetInstanceGeometry()\r\n    geo = [i for i in geoNext]\r\n    out = []\r\n    for i in geo:\r\n    \tif i.GetType()== Solid and i.Volume > 0:\t\r\n    \t\tout.append(i)\t\r\n\t\tif i.GetType() == GeometryInstance:\t\r\n\t\t\tvar = i.SymbolGeometry\r\n\t\t\tfor j in var:\r\n\t\t\t\tif j.Volume > 0:\r\n\t\t\t\t\tout.append(i)\r\n    return out\r\n\r\ndef getDBSolidFromGeo(lstGeo): # Get Solid from Geo\r\n    sol = []\r\n    for i in lstGeo:\r\n        if type(i)== Autodesk.Revit.DB.Solid and i.Volume > 0:\r\n            sol.append(i)\r\n        elif type(i)== Autodesk.Revit.DB.GeometryInstance:\r\n            var = i.SymbolGeometry\r\n            for j in var:\r\n                if type(j)== Autodesk.Revit.DB.Solid and j.Volume > 0:\r\n                    sol.append(j)\r\n        \tsol.append(j)\r\n    return sol\r\n\t\r\ndef getDBPlanarFormSolid(solids): # Get Planarface from solids\r\n    plaf = []\r\n    for i in solids:\r\n        var = i.Faces\r\n        for j in var:\r\n            if j.Reference != None:\r\n                plaf.append(j)\r\n    return plaf\r\n\r\nref = uidoc.Selection.PickObjects(ObjectType.Face, \"Select Multi Face\")\r\nresult = []\r\nlst = []\r\n\r\nfor i in ref :\r\n\tele = uidoc.Document.GetElement(i.ElementId)\r\n\tgetGeoFraming=[getGeoElement(ele) for i in ref]\r\n\tfor j in getGeoFraming:\r\n\t\tgetSolid = [getDBSolidFromGeo(j) for j in getGeoFraming]\r\n\t\tfor t in getSolid:\r\n\t\t\tgetPlane = [getDBPlanarFormSolid(t) for t in getSolid]\r\n\t\t\tresult.append(getPlane)\r\n\t\r\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "c8168253b7724d7b91e6f7d57b0ef7e3",
      "Inputs": [
        {
          "Id": "befdd31b38cc4ef18361791dac11d4c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d541fa144784b2bad600215bb901ea0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "92c4d1a573e840ca95618ba3e144fe86",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d99099a12c1140dfafd47fff5e03ee3c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr \r\nimport sys\r\n\r\nimport math\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nelement = UnwrapElement(IN[0])\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nOUT = [k.ToProtoType() for i in IN[1] for j in i for k in j]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3f843941c3554a90b043f89889e224a5",
      "Inputs": [
        {
          "Id": "69dbb0c485394772a8df3e4b5917d1bf",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0614c5827a1a45239c15a23b70dbb899",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6468c7c7ca4840ebb13201b46e787f1f",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "ce70da41195c49b0a0ce781d72bb3a4a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "000c1c61d0614f0e9e177b7c386e2f90",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "51d48f18-d73d-4b69-94e8-9d7891ce1467",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "b1139b437d7e4bd88e09c65a7983f0a7",
      "Inputs": [
        {
          "Id": "c401652050d040e092b6ec7af75626ea",
          "Name": "Test",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c94da2297b6c478993bb73aec3c864a8",
          "Name": "ifTrue",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d84f6f3e88a400495e48efd1b219957",
          "Name": "ifFalse",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6f2e64c584f4e85be683173bb164084",
          "Name": "result",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": ""
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a>b;",
      "Id": "eaa972fd85224552a6dfdab807427e55",
      "Inputs": [
        {
          "Id": "adc34eb1af1e4977bef161f8c3fc4303",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f40c60951c0040f49e8aed774c2dfb21",
          "Name": "b",
          "Description": "b",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d189638c4c8f42df878aca5e1b47016f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "100;\n200;\n0;\n1;",
      "Id": "3fd3454171ec40daad3ace4da5822557",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9e43172f74fb4c7abcb606ab51267171",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6edbd4b67393498d9813190d3e280262",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dda3ec9e4edf43ec825ca4f4932f8900",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "850f9e12230f4b0c82535ea48acd92ac",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "41e7a2c27dc04c0989460bd93b5db3ee",
      "Inputs": [
        {
          "Id": "05307bea0c3c43f98d5a56cf2625f2c3",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83b4588bd6624872a0e9c021eb2a3ad6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "d690e21a-04c6-480d-9df7-5b7f90f342e2",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "87396469d0644adbae8d4ba2f6a566ad",
      "Inputs": [
        {
          "Id": "9851afab4f564f54ace52ef26bab783f",
          "Name": "Reset",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8cad767130a142b1b04f6cae30b9b5a9",
          "Name": "elesRef",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d42824cf5edc49b8871b949d613f170b",
          "Name": "eleList",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "affaf406a2074dfc822c8060be29e391",
          "Name": "elesId",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto pick Objects"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "466724f9-62a4-492c-96ce-86623e057c14",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "e8ec937ef8a94fbfbc74bba829ab2c79",
      "Inputs": [
        {
          "Id": "a05dea07ad7e4c8ebc0e59d0e575d478",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5bb05b6b6d9c4b8c8717ceb0b779b362",
          "Name": "DBSolid",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto retrive DBSolid of elements "
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\processing.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "eb192327a5d24ad7854aef5788c531d9",
      "Inputs": [
        {
          "Id": "b0dcda9942bf41249793483f83d27792",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "be887cfcc246441d86a8357f50e8fe20",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21c305434d4844348f32f4c7cc9a20d4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "823af2a7e719461ab94c1f12f377e9ec",
      "Inputs": [
        {
          "Id": "e9fd2737cfd4416fbe226554ea57dc99",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f9a5fa0c9df84b42bd812db892a107fd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cec7cc19e5eb470999c8efd2ac097ef1",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cee30e5dfd16421fa3e777f6338c5acf",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6000a7fbf124018bc1fd6d71c0ee0c1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "4a9bc27f68354331ae06f6fe80926fa0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "069b1cc65802410b849e117c0d452ae7",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "8b85c922-eb07-4612-8da6-7ce5b94c047e",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "8d29635ed9ac453f8bb5f57a5f6dc798",
      "Inputs": [
        {
          "Id": "50aeaa2a971e467790b0491414b05c2c",
          "Name": "DBSolid",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eae438335f7043a3873264d69ad38c95",
          "Name": "DBPlanar",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nretrive Elements DBPlanar from DBSolid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "af67eda4-5aac-4cb7-b561-67a6e7e4c72e",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "03c8e1e3ce72402284cc328ac33328d4",
      "Inputs": [
        {
          "Id": "061ad308bceb44a2ad70ad0a2a3ae687",
          "Name": "Objects",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4145a0cb4de4f2481f72695a8822f76",
          "Name": "OUT",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return an object entity that can be displayed on the Dynamo interface."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "94faf09e-43e8-4613-8621-151dcb9b0931",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "d9d0b0d666ca4fb6a86b6f4e168acfa5",
      "Inputs": [
        {
          "Id": "f85090aec2e542c59bb95eb0e52b54cc",
          "Name": "inputList",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d17dd6547a0b462594754a0d81127867",
          "Name": "level",
          "Description": "var[]..[]\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9027d8e4601b4adfb50e439774606aa1",
          "Name": "flattenedList",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto Flatten input List to expected Level"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "81924301647f4b0dbc7cc52a9dca4321",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "caead470ba604072960e22f74ae27369",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "04c999eb-e740-4a29-84fb-63fd8871aad7",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "f2f88c364fe2423894234ff2ec0002f1",
      "Inputs": [
        {
          "Id": "73d929c521f34d939e87aa76709a000f",
          "Name": "Reset",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e079bed1309b49d9aff0774b11a95eb3",
          "Name": "element",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e5256fc9d09f43ca8bd94e231d642493",
          "Name": "reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto select multi Faces"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "4090c20d55f64172bfdb659a06109d56",
      "Inputs": [
        {
          "Id": "49efbdf1cb80407eae8a045796c5d287",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e594a2c98b764af3b51191cf52692501",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "6eaab507-a7b2-41c9-b398-99ccd3293c89",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "a2e68794597e4cb390ff856d2864e26b",
      "Inputs": [
        {
          "Id": "c9e844eb2a054da28a1e11df8ffa1e63",
          "Name": "Reset",
          "Description": "bool\nDefault value : false (disabled)",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "10fb75eeda0a430a929693ea4908aea9",
          "Name": "DynamoXYZ",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "75f81f05da2b488cb668eb982f649bc1",
          "Name": "revitPointsInMillimeterUnit",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo.\r\npick Point in current Workplane and retrive Revit Points in Millimeter unit"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "beaf83b655a24b449d81a844a26c168e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e6765fc4e8b74a9a9db654ca3e2b7a4b",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "ccb95727e0a14a448ce79a989dbfb91f",
      "Inputs": [
        {
          "Id": "ed4aea76073e4fcfad89c13e40ba4114",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00f587a447764d34ab4a7e21659f7997",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\nclass selectionFilter(ISelectionFilter):\r\n    def __init__(self, category1, category2,category3, category4):\r\n        self.category1 = category1\r\n        self.category2 = category2\r\n        self.category3 = category3\r\n        self.category4 = category4\r\n    \r\n    def AllowElement(self, element):\r\n        if element.Category.Name == self.category1 or element.Category.Name == self.category2 or element.Category.Name == self.category3 or element.Category.Name == self.category4:\r\n            return True\r\n        else:\r\n            return False\r\n    def AllowReference(reference, point):\r\n        return False\r\n    \r\nfilterKeys = selectionFilter('Structural Columns', 'Structural Framing', 'Pipes','Pipe Fittings')\r\neles = UnwrapElement(IN[0])\r\nIDS = List[Autodesk.Revit.DB.ElementId]()\r\nfor i in eles:\r\n\tIDS.Add(i.Id)\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nisolateEles = view.IsolateElementsTemporary(IDS)\r\nOUT = eles\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b4abe8c85aff40d9bacf5d75459b2ad1",
      "Inputs": [
        {
          "Id": "0b0432c5c1db4d32a656668cdc58855c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "97d233f59caa4168a2bdf0b1ee9e7cef",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, View, Element\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\neleInActiveView = FilteredElementCollector(doc, view.Id).ToElements()\r\n\r\nOUT = eleInActiveView",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "53bf4929455a4ddcaac7195a943d1cac",
      "Inputs": [
        {
          "Id": "ae012ba6ccd04dafa207d3c5063f508a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b98221dc3b824a3da2f1332d46696e71",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7a319e9145744bd9a934cb8147a2512a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "d1772f92971647b4bcdd7823afd6f057",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6cfb6133651e41e1a2705cbb2dc0aa2b",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\nclass selectionFilter(ISelectionFilter):\r\n    def __init__(self, category1, category2):\r\n        self.category1 = category1\r\n        self.category2 = category2\r\n\r\n    \r\n    def AllowElement(self, element):\r\n        if element.Category.Name == self.category1 or element.Category.Name == self.category2 :\r\n            return True\r\n        else:\r\n            return False\r\n    def AllowReference(reference, point):\r\n        return False\r\n    \r\nele = selectionFilter('Pipes','Pipe Fittings')\r\neleAll = uidoc.Selection.PickElementsByRectangle(ele, \"Hay chon gia dung\")\r\n\r\nIDS = List[Autodesk.Revit.DB.ElementId]()\r\nfor i in eleAll:\r\n\tIDS.Add(i.Id)\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nisolateEles = view.IsolateElementsTemporary(IDS)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = eleAll\r\n\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "bef6bce77bca4fef982d1379eb927f4a",
      "Inputs": [
        {
          "Id": "d9fd8d992b1441ea959e84483f80c553",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ff030585adec45cb9f0b766d9ab8fca7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "71c31e6f5dfd4c828496ebf20e928dbe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa40df189e914c7ab9a5ba7c335049fc",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "f419439c0d324105942ad086cd6797c1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9f05157db0574647a83d09a200cd2bfc",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\nclass selectionFilter(ISelectionFilter):\r\n    def __init__(self, category1, category2):\r\n        self.category1 = category1\r\n        self.category2 = category2\r\n\r\n    \r\n    def AllowElement(self, element):\r\n        if element.Category.Name == self.category1 or element.Category.Name == self.category2 :\r\n            return True\r\n        else:\r\n            return False\r\n    def AllowReference(reference, point):\r\n        return False\r\n    \r\neleAll = IN[1]    \r\nIDS = List[Autodesk.Revit.DB.ElementId]()\r\nfor i in eleAll:\r\n\tIDS.Add(i.Id)\r\n\t\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nisolateEles = view.IsolateElementsTemporary(IDS)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = isolateEles\r\n\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "762c56a7162949b4a09a62d5472f4437",
      "Inputs": [
        {
          "Id": "359c86bb712f4a9b80f4a40906dbc572",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ed51352da9d42aa919582b152a8543a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44ca2a713c8341f995b1cdaffb4f3ea8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI') \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference('RevitAPIUI') \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference('System') \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference('RevitServices') \r\n\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n#Define list/unwrap list functions\r\ndef toList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return result\r\n\r\ndef dList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return UnwrapElement(result)\r\n\r\neleLevel = FilteredElementCollector(doc).OfClass(Level).WhereElementIsNotElementType().ToElements()\r\n\r\neleColumns = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements()\r\n\r\nOUT = eleColumns",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "0ab710febe524388870be6c23085f10c",
      "Inputs": [
        {
          "Id": "aa4a2204ad304560800204cc04dc9a5b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3a7f09e212784f2085ccc92512d51b28",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9fdca0aebeba4014b788e837079a73db",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "6bdfbb4f8f254d98a09120d39a319a11",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cdddd49c1eeb4d459bea7a8a4e8ab94d",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getBuilIncategoryOTS(nameCategory): # Get Name of BuiltInCategory\r\n    return [i for i in System.Enum.GetValues(BuiltInCategory) if i == \"OST_\"+nameCategory or i == nameCategory ]\r\n\r\ncategoriesIn = IN[1]\r\ncategories = []\r\ncategoriesFilter = []\r\nfor i in categoriesIn:\r\n\tcategories.append(getBuilIncategoryOTS(i))\r\n\r\n\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nOUT = categories\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "13e0bf348b5d461d931aee4c5f40225c",
      "Inputs": [
        {
          "Id": "97047a8b408544c394f3eab4b0bcd51a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "15797e601cc74ded9b4430581eee05f6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "13b547346ab24259bef5269c7c07a446",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"OST_\";",
      "Id": "b0f2f4ad54d54be8a05e56ab312d4881",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa006a9f1d64431bbfb6fdc9310c0408",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"Walls\",\"Columns\",\"Floor\",\"Framing\"];",
      "Id": "5cc4961be8f746719506641907263e8a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0322cfc1e68a416295a7432b477b833c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "9062acbc61a241649ceba759dddd60c9",
      "Inputs": [
        {
          "Id": "1ccd5bd492f447d6afd49549e4a4a2ad",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d338d1754ff44fcd9daf19096811044f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\";",
      "Id": "3ba599df30804c71ba2f4e4123bee02a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7e24c4b5be244bc999a726d2fc32a4b7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "fb56ed94fa36419cab85de2500d1e28b",
      "Inputs": [
        {
          "Id": "9c45a8031ced4c9e9616faa22c217f1a",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "e25472b77fd145498d4ee0cd7ba96202",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7634e6c63eb74ee3ad165bc1fe6b942f",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds x to y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.Flatten(x);",
      "Id": "dfeae252008f4ae59b72a2acab4e1dda",
      "Inputs": [
        {
          "Id": "6b20ff0a162a44bbb25a55ca951338c8",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9b6f75cd01f34a0084d771e505fa4c75",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"PipeCurves\",\"PipeFitting\"];",
      "Id": "4faa7046e04548f98fd397f20d602eb6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cf1eb5c443994a0db113b147205b9a16",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "0ae2610a5a0e40d0a924529f6626829e",
      "Inputs": [
        {
          "Id": "f043816018754dd5896c16e0578daabf",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "c4cd9c25bf524320b22a6ba71e6cbba0",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8e7ccd7bf3c49b6bc92c667fed2ee41",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds x to y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "6cc9f457d1f3485a917dc1ae93d508d2",
      "Inputs": [
        {
          "Id": "6962b37417c04facae1af160cf7938a5",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7669be24b4214e4a8f65ab278bd6f699",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.Flatten(x);",
      "Id": "ec5d214f2aa24166b7667c1988f508db",
      "Inputs": [
        {
          "Id": "c0e91ab8322b493ca9f970828ace41fa",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6dd15bc3edc40a39e4d2cfae4a889a0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "f789b09b78074adfa815ba1a483342df",
      "Inputs": [
        {
          "Id": "6eb08b61a8bf4425a7d4b92f0e1e60c8",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "688441e122d0407399c6fa26162eee26",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getBuilIncategoryByStr(nameCategory): # Get Name of BuiltInCategory\r\n    return [i for i in BuiltInCategory.GetValues(BuiltInCategory) if i == \"OST_\"+nameCategory or i == nameCategory ]\r\n\r\ncategoriesIn = UnwrapElement(IN[1])\r\ncategories = []\r\ncategoriesFilter = []\r\n\r\nfor i in categoriesIn:\r\n\tcategories.append(getBuilIncategoryByStr(i))\r\n\r\nOUT = categories\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "561329beea7f4061bdbc71099c2a51f5",
      "Inputs": [
        {
          "Id": "f83e643c6fa94b86b4602c67af35402b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "18595eea2975410dae39eade27b737ce",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "86f8ba0e4dce428f809e5b55961d9473",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI') \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference('RevitAPIUI') \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference('System') \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes') \r\nimport Revit \r\nclr.ImportExtensions('Revit.GeometryConversions') \r\nclr.ImportExtensions('Revit.Elements') \r\nclr.AddReference('RevitService') \r\n\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n#Define list/unwrap list functions\r\ndef toList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return result\r\n\r\ndef dList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return UnwrapElement(result)\r\n\r\n# preparing input for dynamo to revit\r\nelement   = IN[0]\r\nelements  = toList(IN[0])\r\nd_List    = dList(IN[0]) \r\n\r\n# Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n# Now do something here\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = element",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a7f047423c7744298865766588f8ef3f",
      "Inputs": [
        {
          "Id": "81ac73b4ea8044c89f67348a86ad5ae9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4e76dd0f6505467aac142d201ec62e26",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"StructuralColumns\",\"StructuralFraming\",\"Floors\"];",
      "Id": "c5f4ef7d3eb34cb5a850aac6266007ce",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "76e35255519b4513a1271bbf9ad68d24",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "8e32bbc9b37e48a29688732acddd6959",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4e3aecaec9e24e67a1e6297cf462728f",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\n\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\n\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import*\r\nfrom Autodesk.Revit.UI.Selection import*\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getBuilIncategoryOTS(nameCategory): # Get Name of BuiltInCategory\r\n    return [i for i in System.Enum.GetValues(BuiltInCategory) if i == \"OST_\"+nameCategory or i == nameCategory ]\r\n\r\ncategoriesIn = UnwrapElement(IN[1])\r\ncategories = []\r\ncategoriesFilter = []\r\n\r\ncategories.append(getBuilIncategoryOTS(i) for i in categories)\r\ncategoriesFilter.append([FilteredElementCollector(doc).OfCategory(c) for c in categories])\r\ncombineFilter = LogicalOrFilter(categoriesFilter)\r\ndesEle = combineFilter.ToElements()\r\n\r\nIDS = List[Autodesk.Revit.DB.ElementId]()\r\nfor i in desEle:\r\n\tIDS.Add(i.Id)\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nisolateEles = view.IsolateElementsTemporary(IDS)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = desEle\r\n\r\n\t\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ded40264236b45fd8440861162c176bc",
      "Inputs": [
        {
          "Id": "786cc4c49ec44e38800f5845b735078f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "feb2b50fda264ed28106e9a1bbd30186",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "efa63a2308a645a3bd084d1c4ff4480d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n#Define list/unwrap list functions\r\ndef toList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return result\r\n\r\ndef dList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return UnwrapElement(result)\r\n\r\ndef getBuiltInCategories(categoriesIn):\r\n\tbuiltInCategories= []\r\n\tfor category in categoriesIn:\r\n\t\tbuiltInCategories = BuiltInCategory.INVALID\r\n\t\ttry:\r\n\t\t\tbuiltInCategory = BuiltInCategory[str(category)]\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tif builtInCategory != BuiltInCategory.INVALID:\r\n\t\t\tbuiltInCategories.append(builtInCategory)\r\n\treturn builtInCategories\r\n\r\n\r\n# preparing input for dynamo to revit\r\nelement   = IN[1]\r\ncategoriesIn  = toList(IN[1])\r\n\r\n# preparing input for dynamo to revit\r\nbuitlInCategories = getBuiltInCategories(categoriesIn)\r\n\r\n\r\nOUT = buitlInCategories\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "6a20d92271d34e4c980a7018ea9d710b",
      "Inputs": [
        {
          "Id": "8f617858ed0b47e78534e39bad6f0439",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "060edeffd8cd4025a16df4a483fb79e7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c8da5cfebda4b5fbbc0d6acdc5789f4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ndef getBuiltInCategoryOTS(nameCategory): # Get Name of BuiltInCategory\r\n    return [i for i in System.Enum.GetValues(BuiltInCategory) if i.ToString() == \"OST_\"+nameCategory or i.ToString() == nameCategory ]\r\n\r\ncategoriesIn = IN[0]\r\ncategories = []\r\ncategoriesFilter = []\r\n\r\nfor i in categoriesIn:\r\n\tcat = getBuiltInCategoryOTS(i)\r\n\tcategories.append(cat)\r\nflat_categories = [item for sublist in categories for item in sublist]\r\n\r\nfor c in flat_categories:\r\n\tcollector = FilteredElementCollector(doc).OfCategory(c).WhereElementIsNotElementType()\r\n\tcategoriesFilter.append(collector)\r\n\t\r\ndesEle = categoriesFilter.ToElements()\r\n\r\nIDS = List[Autodesk.Revit.DB.ElementId]()\r\nfor i in desEle:\r\n\tIDS.Add(i.Id)\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nisolateEles = view.IsolateElementsTemporary(IDS)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = desEle\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3c8d266c5ed646b1bd2decba6e51930a",
      "Inputs": [
        {
          "Id": "25e9c98a336247e78a13e9c212efaa44",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3f86d26ddba437f85764486c3b525c4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"PipeCurves\"];",
      "Id": "b40913f1de964ce48d256da001005b67",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7e49f8cacc73452380a384a6839535ca",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getAllPipingSystemsInActiveView(doc):\r\n\tcollector = FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_PipingSystem)\r\n\tpipingSystems = collector.ToElements()\r\n\tpipingSystemsName = []\r\n\t\r\n\tfor system in pipingSystems:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.RBS_SYSTEM_NAME_PARAM).AsString()\r\n\t\tpipingSystemsName.append(systemName)\r\n\treturn pipingSystemsName\r\n\t\r\n\t\r\n\t\r\nOUT = getAllPipingSystemsInActiveView(doc)",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3219f23ebb124eb59590da47c70833f1",
      "Inputs": [
        {
          "Id": "85f00dddfdf342a4b6103451ece71641",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f34ef543cc034c8e8e0ec361c7730218",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c5f052668b474ef7a439ab4f382f138b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "true;",
      "Id": "ff48d3072b8b42188eddfa96472c3b33",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3cc55cc6a30d4f3db7426a399311e1e1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "a515732be6f740199e2960e8ee8a864d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5dbe06ab37404b1e9e92dd89fcac2848",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getAllPipingSystemsInActiveView(doc):\r\n\tcollector = FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_PipingSystem)\r\n\tpipingSystems = collector.ToElements()\r\n\tpipingSystemsName = []\r\n\t\r\n\tfor system in pipingSystems:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.RBS_SYSTEM_NAME_PARAM).AsString()\r\n\t\tpipingSystemsName.append(systemName)\r\n\treturn pipingSystemsName\r\n\t\r\ndef getBuiltInCategoryOST(nameCategory): # Get Name of BuiltInCategory\r\n    return [i for i in System.Enum.GetValues(BuiltInCategory) if i.ToString() == \"OST_\"+ str(nameCategory) or i.ToString() == (nameCategory) ]\r\n\r\ncategoriesIN = [\"OST_PipeCurves\", \"OST_PipeFitting\"]\r\ncategories = [getBuiltInCategoryOST(category) for category in categoriesIN]\r\nflat_categories = [item for sublist in categories for item in sublist]\r\n\r\ncategoriesFilter = []\r\nfor c in flat_categories:\r\n    collector = FilteredElementCollector(doc).OfCategory(c).WhereElementIsNotElementType()\r\n    categoriesFilter.append(collector)\r\nflat_categoriesFilter = [[item for item in sublist] for sublist in categoriesFilter]\r\n\r\n\r\n\r\n\r\n\r\nOUT = flat_categoriesFilter\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9b684ed9156a4345ababe39edb7f2cd4",
      "Inputs": [
        {
          "Id": "06dc8dafbfd346f698816cf44deb41fd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8e7b4083b85846d2863e3849f01af7b7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9efc226364c24ac2bbe0383d4b69453b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "da22a36bcbe74969b9a58c4eda3f4ca3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9e6beeafefd046119a72f6b7373d17e1",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a;",
      "Id": "dcd2dbfa4ead4150b1df2cbfb2ff5935",
      "Inputs": [
        {
          "Id": "69c271cf5ffd42a9873f2857156daf21",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aaf245521c9b4cc7b432a0cf083c81d5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "899925a0-68f3-4029-99b9-876992f37e25",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "03e0a43c69a54619a8748a65687d3664",
      "Inputs": [
        {
          "Id": "9fe87e78331f498b9aaba73bf93dc846",
          "Name": "Reset",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5641661c6dde40b98c09717345ab615c",
          "Name": "catrgories",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d2091b5fe8394f269e43321cd9e7e9b3",
          "Name": "filteredFams",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nfilter and isolate element by builtin category"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": null,
      "InputValue": ".\\processing.py",
      "NodeType": "ExtensionNode",
      "Id": "c3d6e0c6c8ff48618280046aa7380442",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6e5481e8b7e84a5a818e17316b16a90e",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 700.0,
      "Id": "3eadc3f95c6849308e83e26e611f194f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "402cba1a6dfb4ce5bf5a4a2aa0626b34",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndiameterIN = IN[1]\r\ninSystemName = IN[2]\r\n\r\ndef getAllPipingSystemsInActiveView(doc):\r\n\tcollector = FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_PipingSystem)\r\n\tpipingSystems = collector.ToElements()\r\n\tpipingSystemsName = []\r\n\t\r\n\tfor system in pipingSystems:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString()\r\n\t\tpipingSystemsName.append(systemName)\r\n\treturn pipingSystemsName, pipingSystems\r\n\r\nallPipingSystemsInActiveView = getAllPipingSystemsInActiveView(doc)\r\nallPipingSystemName = allPipingSystemsInActiveView[0]\r\nallPipingSystem = allPipingSystemsInActiveView[1]\r\nidOfInSystem = allPipingSystemName.index(inSystemName)\r\ndesPipingSystem = allPipingSystem[idOfInSystem]\r\n\r\ncategories = [BuiltInCategory.OST_PipeCurves]\r\ncategoriesFilter = []\r\nfor c in categories:\r\n    collector = FilteredElementCollector(doc).OfCategory(c).WhereElementIsNotElementType().ToElements()\r\n    categoriesFilter.append(collector)\r\nflat_categoriesFilter = [[item for item in sublist] for sublist in categoriesFilter]\r\nIDS = List[ElementId]()\r\nfor i in flat_categoriesFilter:\r\n\tIDS.Add(i.Id)\r\n\r\nparamFilter1 = ParameterValueProvider(ElementId(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM))\r\nreason1 = FilterNumericGreater()\r\ni_Check = IN[1]/304.8\r\nfRule1 = FilterDoubleRule(paramFilter1,reason1,i_Check,0.02)\r\nfilter1 = ElementParameterFilter(fRule1)\r\nelems1 = FilteredElementCollector(doc).WherePasses(fRule1).WhereElementIsNotElementType().ToElements()\r\n\r\ncombineFilter = LogicalAndFilter(desPipingSystem , fRule1)\r\ncollectorDesPipes = FilteredElementCollector(doc, IDS).WherePasses(combineFilter).ToElements()\r\n\r\n\r\n\r\n\r\n# OUT = [desPipingSystem],[ inSystemName]\r\nOUT = collectorDesPipes\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "861fa4d2a763425eb3d10aad7f7b4e54",
      "Inputs": [
        {
          "Id": "f54a6abdf15e4d1cbfedd2577c1a3555",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38f27415aba24057b9ca9566c41fd5bf",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6963b70d38a54ef1b27eff21c34147e8",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "677e0e0e510549feb7ded68b60f6511e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"汚水\";",
      "Id": "063702d605b14739be940e578a2ff03f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "751a3e7b165745779f75bdcb3dd2a1d9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "39c801c6eb6a4ce188a483d1287db6e9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8b0b6f6105db4377a92eb36341c7ac93",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 300.0,
      "Id": "5d88f135f1a540f7b4d12acda77d3a60",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "81b8cb4ca5584182bd4f19fb74c85bcf",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "d690e21a-04c6-480d-9df7-5b7f90f342e2",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "36932540fab7456bbffeea9a8c12f7e9",
      "Inputs": [
        {
          "Id": "831d740f0e3640cc820b8e51f7748cad",
          "Name": "Reset",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "289c27d7d3e84b339b27cdc9ac387417",
          "Name": "elesRef",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3e9ab8457e85484fb48c8dfe58d75354",
          "Name": "eleList",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "82fe4e6225d649bfbf7ac47be9125e9e",
          "Name": "elesId",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto pick Objects"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "e2e01f7242644ea898de2267518bf623",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e7b8bb38e9664dc198db032f7363452c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"汚水\";",
      "Id": "0edbc5a7862b49d29d89e5a9aef3189d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f76e2c7219bd4f1986e84c7d7ae37fb4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "",
      "Id": "afc046f044094f7db9fe4f0d57a73fcb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3c5188d9d5934745b54df6fac1ae60a2",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getAllPipingSystemsInActiveView(doc):\r\n\tcollector = FilteredElementCollector(doc, view.Id).OfCategory(BuiltInCategory.OST_PipingSystem)\r\n\tpipingSystems = collector.ToElements()\r\n\tpipingSystemsName = []\r\n\t\r\n\tfor system in pipingSystems:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.RBS_SYSTEM_NAME_PARAM).AsString()\r\n\t\tpipingSystemsName.append(systemName)\r\n\treturn pipingSystemsName, pipingSystems\r\n\t\r\nOUT = getAllPipingSystemsInActiveView(doc)",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "940ec3132be148869f40049eb44b578c",
      "Inputs": [
        {
          "Id": "9cefa1f53b414f708c0d4056aa34a1b3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9e63ea3e5b6b488390c7c2c03ea5526e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7896e88012c34cc98965c152e8a713ca",
      "Inputs": [
        {
          "Id": "14df46ba81734064bda49f3f1f4c2ade",
          "Name": "object",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee0f56951b354386be77ee0ce6a374cb",
          "Name": "string",
          "Description": "String representation of the object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndiameterIN = UnwrapElement(IN[1])\r\ninSystemName = UnwrapElement(IN[2])\r\n\r\ncategories = [BuiltInCategory.OST_PipeCurves]\r\ncategoriesFilter = []\r\nfor c in categories:\r\n    collector = FilteredElementCollector(doc).OfCategory(c).WhereElementIsNotElementType()\r\n    categoriesFilter.append(collector)\r\nflat_categoriesFilter = [item for sublist in categoriesFilter for item in sublist]\r\n\r\nIDS = List[ElementId]()\r\nfor i in flat_categoriesFilter:\r\n\tIDS.Add(i.Id)\r\n\r\n\r\ndesPipes = []\r\n\r\nparamFilter1 = ParameterValueProvider(ElementId(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM))\r\nreason1 = FilterStringEquals()\r\nfRule = FilterStringRule(paramFilter1,reason1, inSystemName)\r\nfilter1 = ElementParameterFilter(fRule)\r\n\r\ni_Check = IN[1]/304.8\r\nparamFilter2 = ParameterValueProvider(ElementId(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM))\r\nreason2 = FilterNumericEquals()\r\nreason3 = FilterNumericGreaterOrEqual()\r\nfRule2 = FilterDoubleRule(paramFilter2,reason2,i_Check,0.02)\r\nfilter2 = ElementParameterFilter(fRule2)\r\ncombineFilter = LogicalAndFilter(filter1 , filter2)\r\ndesPipes = FilteredElementCollector(doc, IDS).WherePasses(filter2).WhereElementIsNotElementType().ToElements()\r\n\r\nOUT = desPipes\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "0972ad87508d41f895331fe67fde4da5",
      "Inputs": [
        {
          "Id": "3c7163a5844d46e5ab7f0664ce63d299",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "017d62cb3e2744f3b34634622c479136",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "228f0b37705046ae935fd03d329a86bf",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fd68fde09c2b4e2ba46854306a0a9537",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"汚水\";",
      "Id": "5e5a65c1f0e8410d8fa829edf6ba1414",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "507afc4c214640f1a7d81e8aada0c2c8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 700.0,
      "Id": "56123f823df44b35abdbe20891c7cefc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "65a64b712d4947d798a91877aa778bd7",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "汚水",
      "Id": "5b976d2ce1f147118f25c0f4d5a5e52c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b13c1bc8844548b89e42e59a80b60454",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "646437c5af2f433291fff427a4494f7b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2e7c91f68124ad7b943dd7e328e2a3c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ncateList = List[BuiltInCategory]()\r\n\r\ncateList.Add(BuiltInCategory.OST_StructuralColumns)\r\ncateList.Add(BuiltInCategory.OST_StructuralFraming)\r\n\r\n_filter = ElementMulticategoryFilter(cateList)\r\nelems = FilteredElementCollector(doc).WherePasses(_filter).WhereElementIsNotElementType().ToElements()\r\n\r\nOUT = elems",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "7a4d471a2ece48359afca04a0d10f55f",
      "Inputs": [
        {
          "Id": "421ee58106f34227bcad372a6ca6ecb7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f095d82952074687af1e827882c7a86a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "b237291f81184668b02e8348fc29cede",
      "Inputs": [
        {
          "Id": "8551e0acb77348ca97d830ce754b5235",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ef6ed75266bd4273a6a512eb4de20276",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9a5abc6ce91140ac9387184f2d978176",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\PipeCreate.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "6777774bca4d4ffaab9f95c2541fb5e4",
      "Inputs": [
        {
          "Id": "44d4ea3b319e4640b13f52c2920ff900",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "145a3c42c6264be6aa657263bc2ff92b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af2be57c08d142928802db15bbbb866e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "e97e776a4e79440482332d48d86c588c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "90d54a2692ce46beadf07b2174972ea6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\PipeCreate.py",
      "InputValue": ".\\PipeCreate.py",
      "NodeType": "ExtensionNode",
      "Id": "ce2f5fd13aa740e492370de3b9204c0a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0610d5b9e08a426d8fed5a0b013cae4a",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef getAllPipingSystems(doc):\r\n\tcollector = FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_PipingSystem)\r\n\tpipingSystems = collector.ToElements()\r\n\tpipingSystemsName = []\r\n\tfor system in pipingSystems:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString()\r\n\t\tpipingSystemsName.append(systemName)\r\n\treturn pipingSystemsName\r\n\r\npipingSystemsCollector = getAllPipingSystems(doc)\r\n\r\n\r\ndef getAllPipeType(doc):\r\n\tcollector = FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_PipeCurves)\r\n\tpipeTypes = collector.ToElements()\r\n\tpipeTypesName = []\r\n\tfor system in pipeTypes:\r\n\t\tsystemName = system.get_Parameter(BuiltInParameter.SYMBOL_NAME_PARAM).AsString()\r\n\t\tpipeTypesName.append(systemName)\r\n\treturn pipeTypesName\r\n\r\npipeTypesCollector = getAllPipeType(doc)\r\n\r\n\r\nlevelsCollector = FilteredElementCollector(doc).OfClass(Level).ToElements()\r\nlevelsNameCollector = []\r\nfor level in levelsCollector:\r\n\tlevelName = level.Name\r\n\tlevelsNameCollector.append(levelName)\r\n\t\r\nOUT = levelsNameCollector, pipingSystemsCollector, pipeTypesCollector",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "13d8974df9104628ad95503ec3851e00",
      "Inputs": [
        {
          "Id": "5911110f5ff143c39760c0cd259ea69d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2984ccf6b34a4635b14560bbd4ce8048",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c8a72e9b6184f469f462e143e57351d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "f7a2a30e228245b1a04bf8e1ca538372",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f96f997052c647eb96130fcaedee6c01",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "362181dc022c45f79fda7d469b3cfca6",
      "Inputs": [
        {
          "Id": "da7565cf20f14520a4b91092a0e2d794",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "01f4c04d509d4624a44acca4d702e26f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8ef56259f74491aaca6602a7f8f2eaa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\WPF_ExportSchedule\\scheduleExport\\scheduleExport\\Export Schedule.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "8e0b210309244cce830f9e980535126a",
      "Inputs": [
        {
          "Id": "ee5885be32a7418d8f4c0298c0716dc6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b6375cc057e34ec185a4ab813da55302",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba151e5f4e8441dbb25366162cd5395d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "4e5a4b7f77634e8a8954357082492ec5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a062f991953747088ce3d7d3bac1b50f",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\WPF_ExportSchedule\\scheduleExport\\scheduleExport\\Export Schedule.py",
      "InputValue": "WPF_ExportSchedule\\scheduleExport\\scheduleExport\\Export Schedule.py",
      "NodeType": "ExtensionNode",
      "Id": "63151f9397fb49e18dc41d078d104e72",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eee2233252fa43a2902ecbbeb463352d",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\nimport clr \nfrom System.Collections.Generic import *\n\nclr.AddReference(\"ProtoGeometry\")\nfrom Autodesk.DesignScript.Geometry import *\n\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB.Events import*\n\nclr.AddReference('RevitAPIUI')\nfrom Autodesk.Revit.UI import TaskDialog\n\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\n\ndoc = DocumentManager.Instance.CurrentDBDocument\nview = doc.ActiveView\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\n\nx=True\ndypoint = []\nrpointM = []\nrpointI = []\ncounter=0\nmsg = 'Pick Points on current Workplane in order, hit ESC when finished.'\n\nTaskDialog.Show(\"Duynamo\", msg)\n\nwhile x == True:\n\ttry:\n\t\tpt=uidoc.Selection.PickPoint()\n\t\trpM=Point.ByCoordinates(pt.X*304.8,pt.Y*304.8,pt.Z*304.8)# don vi do mac dinh trong revitAPI la Inch, 1in=304.8mm\n\t\trpI=Point.ByCoordinates(pt.X,pt.Y,pt.Z)\n\t\tcounter=+1\n\t\tdypoint.append(pt)\n\t\trpointM.append(rpM)\n\t\trpointI.append(rpI)\n\texcept:\n\t\tx=False\n\nOUT=(dypoint,rpointM,rpointI)\n\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "35ef701269b44261b4528d88fc6b4d75",
      "Inputs": [
        {
          "Id": "2ef46f9650504607918f2d17ffada5ee",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bcd49a4692ea43b08f43b9399a8d205d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a27ea9dac0ad4128bb55c6464544eb1a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport System\r\n \r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import*\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import Selection\r\nfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import*\r\n#########################################################################\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\nclr.AddReference('System.Windows.Forms.DataVisualization')\r\nimport System.Windows.Forms\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\nfrom System.Windows.Forms import *\r\nfrom System.Collections.Generic import *\r\n#########################################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nView = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n#########################################################################\r\nnaCate = [i.Name for i in doc.Settings.Categories]\r\nfil = \"Schedules\"\r\ngetIndex_Item = naCate.index(fil)\r\ncatebyName = UnwrapElement(Revit.Elements.Category.ByName(naCate[getIndex_Item]))\r\n\r\nbic = System.Enum.ToObject(BuiltInCategory, catebyName.Id.IntegerValue)\r\nfilters = FilteredElementCollector(doc).OfCategory(bic).ToElements()\r\nsche_Name = filters\r\n\r\nclass MainForm(Form):\r\n\tdef __init__(self):\r\n\t\tself.InitializeComponent()\r\n\t\r\n\tdef InitializeComponent(self):\r\n\t\tself._groupBox1 = System.Windows.Forms.GroupBox()\r\n\t\tself._groupBox2 = System.Windows.Forms.GroupBox()\r\n\t\tself._clbNaSchedu = System.Windows.Forms.CheckedListBox()\r\n\t\tself._tbxTotalItems = System.Windows.Forms.TextBox()\r\n\t\tself._cbxAllNone = System.Windows.Forms.CheckBox()\r\n\t\tself._label1 = System.Windows.Forms.Label()\r\n\t\tself._label2 = System.Windows.Forms.Label()\r\n\t\tself._txtbBrowse = System.Windows.Forms.TextBox()\r\n\t\tself._bttBrowse = System.Windows.Forms.Button()\r\n\t\tself._bttExport = System.Windows.Forms.Button()\r\n\t\tself._bttCancel = System.Windows.Forms.Button()\r\n\t\tself._label3 = System.Windows.Forms.Label()\r\n\t\tself._groupBox1.SuspendLayout()\r\n\t\tself._groupBox2.SuspendLayout()\r\n\t\tself.SuspendLayout()\r\n\t\t# \r\n\t\t# groupBox1\r\n\t\t# \r\n\t\tself._groupBox1.Controls.Add(self._label1)\r\n\t\tself._groupBox1.Controls.Add(self._cbxAllNone)\r\n\t\tself._groupBox1.Controls.Add(self._tbxTotalItems)\r\n\t\tself._groupBox1.Controls.Add(self._clbNaSchedu)\r\n\t\tself._groupBox1.Location = System.Drawing.Point(9, 6)\r\n\t\tself._groupBox1.Name = \"groupBox1\"\r\n\t\tself._groupBox1.Size = System.Drawing.Size(445, 176)\r\n\t\tself._groupBox1.TabIndex = 0\r\n\t\tself._groupBox1.TabStop = False\r\n\t\tself._groupBox1.Text = \"Schedules\"\r\n\t\t# \r\n\t\t# groupBox2\r\n\t\t# \r\n\t\tself._groupBox2.Controls.Add(self._bttBrowse)\r\n\t\tself._groupBox2.Controls.Add(self._txtbBrowse)\r\n\t\tself._groupBox2.Controls.Add(self._label2)\r\n\t\tself._groupBox2.Location = System.Drawing.Point(9, 188)\r\n\t\tself._groupBox2.Name = \"groupBox2\"\r\n\t\tself._groupBox2.Size = System.Drawing.Size(445, 52)\r\n\t\tself._groupBox2.TabIndex = 1\r\n\t\tself._groupBox2.TabStop = False\r\n\t\tself._groupBox2.Text = \"Export Options\"\r\n\t\t# \r\n\t\t# clbNaSchedu\r\n\t\t# \r\n\t\tself._clbNaSchedu.CheckOnClick = True\r\n\t\tself._clbNaSchedu.AllowDrop = True\r\n\t\tself._clbNaSchedu.DisplayMember = \"Name\"\r\n\t\tself._clbNaSchedu.FormattingEnabled = True\r\n\t\tself._clbNaSchedu.Location = System.Drawing.Point(7, 20)\r\n\t\tself._clbNaSchedu.Name = \"clbNaSchedu\"\r\n\t\tself._clbNaSchedu.Size = System.Drawing.Size(432, 124)\r\n\t\tself._clbNaSchedu.TabIndex = 0\r\n\t\tself._clbNaSchedu.SelectedIndexChanged += self.ClbNaScheduSelectedIndexChanged\r\n\t\tfor i in sche_Name:\r\n\t\t\tself._clbNaSchedu.Items.Add(i)\t\r\n\t\t# \r\n\t\t# tbxTotalItems\r\n\t\t# \r\n\t\tself._tbxTotalItems.Location = System.Drawing.Point(387, 150)\r\n\t\tself._tbxTotalItems.Name = \"tbxTotalItems\"\r\n\t\tself._tbxTotalItems.Size = System.Drawing.Size(52, 20)\r\n\t\tself._tbxTotalItems.TabIndex = 1\r\n\t\tself._tbxTotalItems.TextChanged += self.TbxTotalItemsTextChanged\r\n\t\t# \r\n\t\t# cbxAllNone\r\n\t\t# \r\n\t\tself._cbxAllNone.Location = System.Drawing.Point(7, 150)\r\n\t\tself._cbxAllNone.Name = \"cbxAllNone\"\r\n\t\tself._cbxAllNone.Size = System.Drawing.Size(104, 24)\r\n\t\tself._cbxAllNone.TabIndex = 2\r\n\t\tself._cbxAllNone.Text = \"Select All/None\"\r\n\t\tself._cbxAllNone.UseVisualStyleBackColor = True\r\n\t\tself._cbxAllNone.CheckedChanged += self.CbxAllNoneCheckedChanged\r\n\t\r\n\t\t# \r\n\t\t# label1\r\n\t\t# \r\n\t\tself._label1.Location = System.Drawing.Point(314, 148)\r\n\t\tself._label1.Name = \"label1\"\r\n\t\tself._label1.Size = System.Drawing.Size(67, 23)\r\n\t\tself._label1.TabIndex = 3\r\n\t\tself._label1.Text = \"Total Items:\"\r\n\t\tself._label1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft\r\n\t\t# \r\n\t\t# label2\r\n\t\t# \r\n\t\tself._label2.Location = System.Drawing.Point(7, 20)\r\n\t\tself._label2.Name = \"label2\"\r\n\t\tself._label2.Size = System.Drawing.Size(74, 23)\r\n\t\tself._label2.TabIndex = 0\r\n\t\tself._label2.Text = \"Out Folder:\"\r\n\t\t# \r\n\t\t# txtbBrowse\r\n\t\t# \r\n\t\tself._txtbBrowse.Location = System.Drawing.Point(67, 17)\r\n\t\tself._txtbBrowse.Name = \"txtbBrowse\"\r\n\t\tself._txtbBrowse.Size = System.Drawing.Size(275, 20)\r\n\t\tself._txtbBrowse.TabIndex = 2\r\n\t\tself._txtbBrowse.TextChanged += self.TxtbBrowseTextChanged\r\n\t\t# \r\n\t\t# bttBrowse\r\n\t\t# \r\n\t\tself._bttBrowse.Location = System.Drawing.Point(348, 15)\r\n\t\tself._bttBrowse.Name = \"bttBrowse\"\r\n\t\tself._bttBrowse.Size = System.Drawing.Size(75, 23)\r\n\t\tself._bttBrowse.TabIndex = 3\r\n\t\tself._bttBrowse.Text = \"Browse...\"\r\n\t\tself._bttBrowse.UseVisualStyleBackColor = True\r\n\t\tself._bttBrowse.Click += self.BttBrowseClick\r\n\t\t# \r\n\t\t# bttExport\r\n\t\t# \r\n\t\tself._bttExport.Location = System.Drawing.Point(298, 246)\r\n\t\tself._bttExport.Name = \"bttExport\"\r\n\t\tself._bttExport.Size = System.Drawing.Size(75, 23)\r\n\t\tself._bttExport.TabIndex = 2\r\n\t\tself._bttExport.Text = \"Export\"\r\n\t\tself._bttExport.UseVisualStyleBackColor = True\r\n\t\tself._bttExport.Click += self.BttExportClick\r\n\t\t# \r\n\t\t# bttCancel\r\n\t\t# \r\n\t\tself._bttCancel.Location = System.Drawing.Point(379, 246)\r\n\t\tself._bttCancel.Name = \"bttCancel\"\r\n\t\tself._bttCancel.Size = System.Drawing.Size(75, 23)\r\n\t\tself._bttCancel.TabIndex = 3\r\n\t\tself._bttCancel.Text = \"Cancel\"\r\n\t\tself._bttCancel.UseVisualStyleBackColor = True\r\n\t\tself._bttCancel.Click += self.BttCancelClick\r\n\t\t# \r\n\t\t# label3\r\n\t\t# \r\n\t\tself._label3.Font = System.Drawing.Font(\"Microsoft Sans Serif\", 8.25, System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point, 0)\r\n\t\tself._label3.Location = System.Drawing.Point(16, 246)\r\n\t\tself._label3.Name = \"label3\"\r\n\t\tself._label3.Size = System.Drawing.Size(138, 23)\r\n\t\tself._label3.TabIndex = 4\r\n\t\tself._label3.Text = \"BIM3DM - Dynamo API\"\r\n\t\t# \r\n\t\t# MainForm\r\n\t\t# \r\n\t\tself.BackColor = System.Drawing.SystemColors.ButtonHighlight\r\n\t\tself.ClientSize = System.Drawing.Size(461, 272)\r\n\t\tself.Controls.Add(self._label3)\r\n\t\tself.Controls.Add(self._bttCancel)\r\n\t\tself.Controls.Add(self._bttExport)\r\n\t\tself.Controls.Add(self._groupBox2)\r\n\t\tself.Controls.Add(self._groupBox1)\r\n\t\tself.Name = \"MainForm\"\r\n\t\tself.ShowIcon = False\r\n\t\tself.Text = \"Export Schedules\"\r\n\t\tself._groupBox1.ResumeLayout(False)\r\n\t\tself._groupBox1.PerformLayout()\r\n\t\tself._groupBox2.ResumeLayout(False)\r\n\t\tself._groupBox2.PerformLayout()\r\n\t\tself.ResumeLayout(False)\r\n\r\n\r\n\tdef ClbNaScheduSelectedIndexChanged(self, sender, e):\r\n\t\tpass\r\n\r\n\tdef CbxAllNoneCheckedChanged(self, sender, e):\r\n\t\tvar = self._clbNaSchedu.Items.Count\r\n\t\tself._tbxTotalItems.Text = str(var)\r\n\t\trangers = range(var)\r\n\t\tfor i in rangers:\r\n\t\t\tif self._cbxAllNone.Checked == True:\r\n\t\t\t\tself._clbNaSchedu.SetItemChecked(i, True)\r\n\t\t\telse:\r\n\t\t\t\tself._clbNaSchedu.SetItemChecked(i,False)\r\n\t\tpass\r\n\r\n\tdef TbxTotalItemsTextChanged(self, sender, e):\r\n\t\tpass\r\n\r\n\tdef TxtbBrowseTextChanged(self, sender, e):\r\n\t\tpass\r\n\r\n\tdef BttBrowseClick(self, sender, e):\r\n\t\tfileDialog = FolderBrowserDialog()\r\n\t\tfileDialog.ShowDialog()\r\n\t\tself._txtbBrowse.Text = fileDialog.SelectedPath\r\n\t\tpass\r\n\r\n\tdef BttCancelClick(self, sender, e):\r\n\t\tself.Close()\r\n\t\tpass\r\n\tdef BttExportClick(self, sender, e):\r\n\t\tselected = []\r\n\t\tfor i in self._clbNaSchedu.CheckedItems:\r\n\t\t\tselected.append(i)\r\n#_________________________________________________________________#\r\n\t\tnameSched = []\r\n\t\tfor i in selected:\r\n\t\t\tnameSched.append(i.Name + \".csv\")\r\n\t\tpath = self._txtbBrowse.Text\r\n#_________________________________________________________________#\r\n\t\tself.result_list = []\r\n\t\tfor index, sched in enumerate(selected):\r\n\t\t\tschedule = UnwrapElement(sched)\r\n\t\t\tfileName = nameSched[index]\r\n\t\t\ttry:\r\n\t\t\t\texport_options = ViewScheduleExportOptions()\r\n\t\t\t\tschedule.Export(path,fileName,export_options)\r\n\t\t\t\tself.result_list.append(\"Schedule Exported\")\r\n\t\t\texcept:\r\n\t\t\t\tself.result_list.append(\"Eport Failure\")\r\n\t\t\r\n\t\tself.Close()\r\n\r\n\t\tpass\r\nf = MainForm()\r\nApplication.Run(f)\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b352a7b62c6949b3afd06a44373e0a67",
      "Inputs": [
        {
          "Id": "f93122c23a0649b788b68d6ab0ddda60",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b972983f4464c5385220d8cb09a266b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "900ad9a4b0e14f9eae1c97847f3c6866",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "810211b2a17844079bd284420aad8a39",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "43e5bf3fb15d49d9b8b71d44b9270518",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "fd7c5666620b4290b5ac8043dc3d5b77",
      "Inputs": [
        {
          "Id": "a9738c12246e439db93f48aa5d4e47c1",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4fa816f24fb9418786ebf24f9ee6a258",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f8d83604c38843d18ac8ff4de2d075e6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\SetPipeTag.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "1b2a6cc5e638466fa4ded15612d3495f",
      "Inputs": [
        {
          "Id": "83e2145b784f493691728a35f571c02e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c5a08dc0b1f341dea8ce32d4ecbc39db",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ac1fcde57364fc8a0e2d9a59d56e456",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "54506452177e4ab29645cc421be138d3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ac3a1b8a82fb42dbae8cd5f2459ab384",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\SetPipeTag.py",
      "InputValue": ".\\SetPipeTag.py",
      "NodeType": "ExtensionNode",
      "Id": "88b8dc88eaa549a6a7876c9f5385d423",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8a9a3bdc25564f2caf29b7b5525e47a4",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "ee218d55212641a996d7b133bbffdb92",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2ad4feb1a37d4da8b438a5768077f9eb",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\MarkupPickedPoints.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "6a8d07e61dd64f84b9d28178c762a8f3",
      "Inputs": [
        {
          "Id": "47768746989542f49d3050d9920429d4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "faf165531c704a6795ce2ad69ba70061",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8a360d62beaf454d9fd74079b6bbd09d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\MarkupPickedPoints.py",
      "InputValue": ".\\MarkupPickedPoints.py",
      "NodeType": "ExtensionNode",
      "Id": "40be0a3d7c9247d5b3ca29678d7f583f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a553b283536643a39934c8120fdb3e41",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "7530bfdbb5d84b0182508e460bd1fd05",
      "Inputs": [
        {
          "Id": "ce6423d44d764ee5b660e537dd94de6d",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a49124d7d3ac4d338f458a390c8138cb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c503297e787641259a7b9354b9fef619",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "05e4dc06c39e4e2c86e80c81b02b62c3",
      "Inputs": [
        {
          "Id": "a70e9e2a902940c09017096dbd988043",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "885a8c9de7de4ee6a573c42ef023e318",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f1397706f0a4437ab18c30f0fe0ced2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a Python script from a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "re  = open(r\"C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\setPipeDistance.py\", \"r\")\r\n\r\ninterpret = re.read()\r\n\r\nOUT =  interpret",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "60a524b7c72747a98ce08c959c95222b",
      "Inputs": [
        {
          "Id": "8e945dadf4464c598f9af42292cfc1e0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c28dfc56fa7a4637aa11c335bd79cc5b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "23666f42f6e74413b82b32d0dfd7f130",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "a257721bf06846c580eae76b16737d24",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5c16edebb7bd4aab997f7466af665fd6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\Desktop\\Python\\02_PyRevit\\04_Processing\\setPipeDistance.py",
      "InputValue": ".\\setPipeDistance.py",
      "NodeType": "ExtensionNode",
      "Id": "6ab1148e905243c381a0a8fba5e8f46d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f3f79e8de0c84068ba5e0baaaefd13b8",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "04c999eb-e740-4a29-84fb-63fd8871aad7",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "482f9e1345044396aa3a4f5981325699",
      "Inputs": [
        {
          "Id": "8d9d6ce2ac5a49729dc2af54edf6a8e7",
          "Name": "Reset",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb698377ee2f4a9694860f993506b8c4",
          "Name": "element",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "213d081cdcc34065b19b9d3d0fba9e29",
          "Name": "reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "from Duynamo\r\nto select multi Faces"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "4c53749e60e14e3da6af1b08d06c6aac",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c922cf8c2ae04cf9b5e9bdea5609338a",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys \r\nimport System   \r\nimport math\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import* \r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nclr.AddReference(\"System.Drawing\")\r\nclr.AddReference(\"System.Windows.Forms.DataVisualization\")\r\n\r\nclr.AddReference(\"DSCoreNodes\")\r\nfrom DSCore.List import Flatten\r\nimport System.Windows.Forms \r\nfrom System.Windows.Forms import *\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n\"\"\"_____________________________\"\"\"\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\ndef pickFace():\r\n\telements = []\r\n\tplanarFace = []\r\n\trefs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"pick face\")\r\n\tfor ref in refs:\r\n\t\tgeometryCurves =[]\r\n\t\tele = doc.GetElement(ref.ElementId)\r\n\t\tface = ele.GetGeometryObjectFromReference(ref)\r\n\t\tcurveLoops = face.GetEdgesAsCurveLoops()\r\n\t\tlines1 = [line.ToProtoType() for curveLoop in curveLoops for line in curveLoop]\r\n\r\n\t\tlines = Flatten(lines1)\r\n\r\n\t\tDBFace = face.GetSurface()\r\n\t\telements.append(ele)\r\n\t\tplanarFace.append(DBFace)\r\n\treturn  refs, elements, planarFace , lines\r\npicked = pickFace()\r\n\r\n\r\n\r\n\r\nOUT = picked",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "91ee76bf6e2f4cb18dc3e10825aa432b",
      "Inputs": [
        {
          "Id": "6723ad70d58c41de8f3c08d399de9d5e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1da327f821fe4f6296f5c3b1a8afb921",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys \r\nimport System   \r\nimport math\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import* \r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nclr.AddReference(\"System.Drawing\")\r\nclr.AddReference(\"System.Windows.Forms.DataVisualization\")\r\n\r\nimport System.Windows.Forms \r\nfrom System.Windows.Forms import *\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n\"\"\"_____________________________\"\"\"\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ndef pickFace():\r\n\telements = []\r\n\tplanarFace = []\r\n\trefs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"pick face\")\r\n\tfor f in faces:\r\n\t\tfor r in f:\r\n\t\t\te = uidoc.Document.GetElement(r)\r\n\t\t\tdsface = e.GetGeometryObjectFromReference(r).ToProtoType(True)\r\n\t\t\t[f.Tags.AddTag(\"RevitFaceReference\", r) for f in dsface]\r\n\t\t\tdsfaces.append(dsface)\r\n\r\n\t\t\tcurveLoop = dsface.GetEdgesAsCurveLoops()\r\n\t\t\telements.append(e)\r\n\t\t\tplanarFace.append(dsface)\r\n\treturn  refs, elements, face ,curveLoop\r\n\r\n\r\npicked = pickFace()\r\ndesObject = picked[1]\r\n\r\n\r\n\r\nOUT = picked",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b3b7b8449e5448fe80a4a5b9904ad8e6",
      "Inputs": [
        {
          "Id": "5719e2e477ff4a69847260efcc1779e9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17133aaeeaf64abbb16a305bcbf39549",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a7144a8fc57a4485a4d3ab14034db147",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.Flatten(x);",
      "Id": "4e1448a63dcb4a80aa522f58e93a93af",
      "Inputs": [
        {
          "Id": "741bd644719740e5a8fb1a7ae19c7d56",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5fb998d81c348c3a782eafb3589d153",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[4];",
      "Id": "03c0336b88e341d8b01d641096c8a634",
      "Inputs": [
        {
          "Id": "158a77ca3ee6426e831591aa9a63f79d",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c87ed8f09f2844bd92766070439caf4d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys \r\nimport System   \r\nimport math\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import* \r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nclr.AddReference(\"System.Drawing\")\r\nclr.AddReference(\"System.Windows.Forms.DataVisualization\")\r\nclr.AddReference(\"DSCoreNodes\")\r\nfrom DSCore.List import Flatten\r\n\r\nimport System.Windows.Forms \r\nfrom System.Windows.Forms import *\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n\"\"\"_____________________________\"\"\"\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ndef pickFace():\r\n\telements = []\r\n\tplanarFace = []\r\n\trefs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"pick face\")\r\n\tfor i in refs:\r\n\t\tele = doc.GetElement(i.ElementId)\r\n\t\tface = ele.GetGeometryObjectFromReference(i)\r\n\t\tcurveLoop = face.GetEdgesAsCurveLoops()\r\n\tcurveLoopFlat = Flatten(curveLoop)\r\n\r\n\tDBFace = face.GetSurface()\r\n\telements.append(ele)\r\n\tplanarFace.append(DBFace)\r\n\treturn  refs, elements, planarFace , face,curveLoopFlat\r\n\r\npicked = pickFace()\r\n\r\n\r\n\r\n\r\nOUT = picked",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "97c6d78a93944875905b00d61bc9e007",
      "Inputs": [
        {
          "Id": "985ec9ba23264321874db9bb593460eb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "717b127bbbae4d88ac7d720bae5cbc1d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\n# preparing input for dynamo to revit\r\nelement   = IN[0]\r\n\r\n\r\nOUT = [j.ToProtoType() for j in element]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "aa64e5aee92946868ee14a4613f20df3",
      "Inputs": [
        {
          "Id": "160683fbd201410ea8dfcbefba8fdfb8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b358311068f840afa6f23f4686ffec60",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[2];",
      "Id": "d7efdb9871a541138c8bc89473555876",
      "Inputs": [
        {
          "Id": "b1a95903baf44335a6d7673b8c1eaa91",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af0071a722b4401ba0f76b3121375e42",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\n# preparing input for dynamo to revit\r\nlines   = IN[0]\r\n\r\n\r\nePList =[]\r\nuniqueEPList =[]\r\n\r\nlineEP = lines.GetEndPoint(0)\r\n\r\nOUT = lineEP",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "303c11c3589748f180209e0d98da58a4",
      "Inputs": [
        {
          "Id": "4252d219edde4c6484f02a55acc4722d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3a56b207b6474e039516db5337db83cd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n100;",
      "Id": "0c33d36f098c472bbcc1be4ca8503f55",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2777594e11c4454ea5db8391f58fe04b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b73e46bf32524ff79bab2356d33c1bf9",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "b7d45b2980fc445d9673e1720c3a4068",
      "Inputs": [
        {
          "Id": "2d88809ce0fd48a78b45c168f3cec597",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "35e74dce020c4755aa1983fd753a38f2",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8b2ff0a648c142e9b5a9238052d9c785",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6402e8d299e4e5d8535bd4ab295ec7a",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "20ace60b60cb4f968abdadbe40fd0bac",
      "Inputs": [
        {
          "Id": "f5350ff306c84732986b30da9dff871e",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fdd258e3accf478781307168c531e442",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b9378aeca0940e2bc077c639448849a",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c7897651baec470487da69ad49dae0ac",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "81f82dfa87484b92a348d476e1fd3dff",
      "Inputs": [
        {
          "Id": "ea93b21822594418afd1c9e3fbc2f800",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "862af45058ed45c98f611991cecdc8de",
          "Name": "endPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22fbd1ab82224920841f94f8a6fb8890",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\n# preparing input for dynamo to revit\r\nlines   = IN[0]\r\n\r\n\r\nePList =[]\r\nuniqueEPList =[]\r\nfor line in lines:\r\n\tlineEP = line.GetEndPoint(0)\r\n\tePList.append(lineEP)\r\nOUT = ePList",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "630ed414f04e499793ab360eea3aeac1",
      "Inputs": [
        {
          "Id": "b317914ae32a48cd9a49c3dc4876b4df",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8f5b5f1dfa244309dc21d69212cd1ab",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.EndPoint",
      "Id": "553c002501724bf9b71d551ba89ba02a",
      "Inputs": [
        {
          "Id": "7b8434cf6c3641f9bac1d2b64723bec4",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c9d9ca400a014a8aa6f01d4b9b31bf1e",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the end Point along the Curve\n\nCurve.EndPoint: Point"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys \r\nimport System   \r\nimport math\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import* \r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nclr.AddReference(\"System.Drawing\")\r\nclr.AddReference(\"System.Windows.Forms.DataVisualization\")\r\n\r\nimport System.Windows.Forms \r\nfrom System.Windows.Forms import *\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\n\"\"\"_____________________________\"\"\"\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ndef pickFace():\r\n\telements = []\r\n\tplanarFace = []\r\n\trefs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"pick face\")\r\n\tfor r in refs:\r\n\t\te = uidoc.Document.GetElement(r)\r\n\t\tdsface = e.GetGeometryObjectFromReference(r).ToProtoType(True)\r\n\t\t[f.Tags.AddTag(\"RevitFaceReference\", r) for f in dsface]\r\n\t\tplanarFace.append(dsface)\r\n\t\tcurveLoop = dsface.GetEdgesAsCurveLoops()\r\n\t\telements.append(e)\r\n\r\n\treturn  refs, elements, face ,curveLoop\r\n\r\n\r\npicked = pickFace()\r\ndesObject = picked[1]\r\n\r\n\r\n\r\nOUT = picked",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "09b3782b78824c5c903624b710579785",
      "Inputs": [
        {
          "Id": "49b09d7e65064aca8c75ad0caff8f100",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fbc385d86f3495f8890e7fe34608fba",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "d5ab45d3-040c-46c6-9aa7-45c75aed4a19",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "b4572c16682c4aee9ffd9dacd0e1e1ab",
      "Inputs": [
        {
          "Id": "d99ccc987df346358f03caacfe57a713",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8092b4de758f45689007da669600e053",
          "Name": "ButtonText",
          "Description": "string\nDefault value : \"Select face(s)\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d8ff3d1f29945509727915ceedcab7c",
          "Name": "SelectFaces input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Revit face selection input for UI.MultipleInputForm++. Check out www.data-shapes.net for more infos!"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "4d97982279da4b84838b743c2029fdba",
      "Inputs": [
        {
          "Id": "d8a1bdf2b18440ec92c508bfd9a3c28a",
          "Name": "Description_optional",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a18cdd2d4e74d46a9f6888bdbf65e9d",
          "Name": "Logo_optional",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cbd57f93a5b94690afa6a9219335b24a",
          "Name": "ButtonText_optional",
          "Description": "string\nDefault value : \"Set Values\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4705e1ff20004a1aa5206fa63b938bf4",
          "Name": "Inputs",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "42add59d7f7a4b58bdbd7beaca190ded",
          "Name": "Toggle",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c914adee529e4a6cbaf60ccb9d609f6b",
          "Name": "LinkToHelp_optional",
          "Description": "string\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c5b56302781478caffee7aa794c4d79",
          "Name": "CancelButtonText_optional",
          "Description": " Cancel button will only be displayed if a label text is entered here\n\nstring\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b79afc3a7b3543d59261ccc56cca8f1e",
          "Name": "MaxHeight_optional",
          "Description": "int\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f1038cacea843bbb98eb90c4c91c0ec",
          "Name": "Width_optional",
          "Description": "int\nDefault value : 400",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5552c8e83179475f83206a242a90f1f4",
          "Name": "LabelWidth_optional",
          "Description": "int\nDefault value : 140",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c9a4e38e9b5b467f910511c06149a144",
          "Name": "User Inputs",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a6d47d14269451893cb86785b079414",
          "Name": "Was Run ",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f536693ee62846bebdf1287c43305d6a",
          "Name": "Was Cancelled",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a form with multiple inputs. \r\nsee www.data-shapes.net for tutorials and infos!"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,  2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\t\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\nimport io\r\nimport tempfile\r\nimport System\r\n\t\r\ntry:\r\n\tclr.AddReference('System.Windows.Forms')\r\n\tclr.AddReference('System.Drawing')\r\n\tclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\t\r\n\tfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\tfrom System.Windows.Forms import Application, DockStyle, Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding\r\n\tfrom System.Windows.Forms.DataVisualization.Charting import *#Chart , SeriesChartType\r\n\tfrom System.Collections.Generic import *\r\n\tfrom System.Collections.Generic import List as iList\r\n\tfrom System.Windows.Forms import View as vi\r\n\tclr.AddReference('System')\r\n\tfrom System import IntPtr , Char\r\n\tfrom System import Type as SType, IO\r\n\tfrom System import Array\r\n\tfrom System.ComponentModel import Container\r\n\tclr.AddReference('System.Data')\r\n\tfrom System.Data import DataTable , DataView\r\n\r\n\ttry: #try to import All Revit dependencies\r\n\t\tclr.AddReference('RevitAPIUI')\r\n\t\tfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\n\t\tfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\t\tclr.AddReference('RevitNodes')\r\n\t\timport Revit\r\n\t\tclr.ImportExtensions(Revit.Elements)\r\n\t\tclr.ImportExtensions(Revit.GeometryConversion)\r\n\t\t\r\n\t\tclr.AddReference('RevitServices')\r\n\t\tfrom RevitServices.Persistence import DocumentManager\r\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\tuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\t\r\n\t\tclr.AddReference('RevitAPI')\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageImportOptions\t\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n\t\tfrom Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n\t\t\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import  UnitType\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import SpecTypeId\r\n\r\n\t\tdbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n\t\tviewindex = 0\r\n\t\ttry:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\texcept:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\t\t\r\n\t\tclass selectionfilter(ISelectionFilter):\r\n\t\t\tdef __init__(self,category):\r\n\t\t\t\tself.category = category\r\n\t\t\tdef AllowElement(self,element):\r\n\t\t\t\tif element.Category.Name in [c.Name for c in self.category]:\r\n\t\t\t\t\treturn True\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn False\r\n\t\t\tdef AllowReference(reference,point):\r\n\t\t\t\treturn False\r\n\r\n\r\n\t\t\t\r\n\texcept: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n\t\tpass\r\n\t\r\n\timportcolorselection = 0\r\n\t\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\n\texcept:\r\n\t\timportcolorselection = 1\r\n\t\r\n\r\n\t\r\n\tclr.AddReference('ProtoGeometry')\r\n\tfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n\tfrom System.Reflection import Assembly\r\n\timport xml.etree.ElementTree as et\r\n\t\r\n\r\n\t\r\n\timport re\t\r\n\tdef regexEndNum(input):\r\n\t\ttry:\r\n\t\t\treturn \tre.search('(\\d+)$', input).group(0)\r\n\t\texcept:\r\n\t\t\treturn \"\"\r\n\r\n\tdef iterateThroughNodes(collection,li):\r\n\t\tif hasattr(collection,'Nodes'):\r\n\t\t\tntest = collection.Nodes\r\n\t\t\tif len(ntest) > 0:\r\n\t\t\t\tfor i in ntest:\r\n\t\t\t\t\titerateThroughNodes(i,li)\r\n\t\t\telse:\r\n\t\t\t\tif collection.Checked:\r\n\t\t\t\t\tli.append(collection.Tag)\r\n\t\treturn li\r\n\t\t\r\n\r\n\t\r\n\tclass MultiTextBoxForm(Form):\r\n\t\t\r\n\t    def __init__(self):\r\n\t        self.Text = 'Data-Shapes | Multi Input UI ++'\r\n\t        self.output = []\r\n\t        self.values = []\r\n\t        self.cancelled = False\r\n\t\r\n\t    def setclose(self, sender, event):\r\n\t    \tcbindexread = 0\r\n\t    \tif sender.Name != \"Cancel\":\r\n\t    \t\tfor f in self.output:\r\n\t    \t\t\tif f.GetType() == myTextBox:\r\n\t    \t\t\t\tif f._isNum :\r\n\t    \t\t\t\t\tval = float(f.Text)\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\tval = f.Text\r\n\t    \t\t\t\tself.values.append(val)\r\n\t    \t\t\tif f.GetType() == CheckBox:\r\n\t    \t\t\t\tself.values.append(f.Checked)\r\n\t    \t\t\tif f.GetType() == Button:\r\n\t    \t\t\t\tif isinstance(f.Tag ,list):\r\n\t    \t\t\t\t\ttry:\r\n\t    \t\t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\t    \t\t\t\t\t\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t    \t\t\t\t\t\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\ttry:\t    \t\t\t\t\r\n\t    \t\t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n\t    \t\t\t\t\t\t\tself.values.append(f.Tag)\r\n\t    \t\t\t\t\t\telse:\r\n    \t\t\t\t\t\t\t\tself.values.append([])\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t\r\n\t    \t\t\tif f.GetType() == ComboBox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = f.Text\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == mylistview:\r\n\t    \t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n\t    \t\t\tif f.GetType() == mytrackbar:\r\n\t    \t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n\t    \t\t\tif f.GetType() == mygroupbox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == myDataGridView:\r\n\t    \t\t\t\tf.EndEdit()\r\n\t    \t\t\t\tdsrc = f.DataSource\r\n\t    \t\t\t\tout = []\r\n\t    \t\t\t\tcolcount = f.ColumnCount\r\n\t    \t\t\t\trowcount = f.RowCount - 1\r\n\t    \t\t\t\tif f.Tag:\r\n\t\t    \t\t\t\tl = []\r\n\t    \t\t\t\t\tfor i in range(colcount):\t    \t\t\t\t\t\t\r\n\t    \t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n\t    \t\t\t\t\tout.append(l)\t    \t\t\t\t\t\t\r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\telse: \r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\tself.values.append(out)\r\n\t    \t\t\tif f.GetType() == TreeView:\r\n\t    \t\t\t\tls = []\r\n\t    \t\t\t\tnds = f.Nodes[0]\r\n\t    \t\t\t\titerateThroughNodes(nds,ls)\r\n\t    \t\t\t\tself.values.append(ls)\r\n\t    \t\t\tif f.GetType() == GroupBox:\r\n\t    \t\t\t\trb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n\t    \t\t\t\tself.values.append(rb.Text)\r\n\t    \t\t\t\tf.Controls.Remove(rb)\r\n\t    \telse:\r\n\t    \t\tself.values = None\r\n\t    \t\tself.cancelled = True\r\n\t    \tself.Close()\r\n\t\r\n\t    def reset(self, sender, event):\r\n\t\t\tpass\r\n\t\r\n\t    def openfile(self, sender, event):\r\n\t\t\tofd = OpenFileDialog()\r\n\t\t\tdr = ofd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = ofd.FileName\r\n\t\t\t\tsender.Tag = ofd.FileName\r\n\r\n\t    def exportToExcel(self, sender, event):\r\n\t    \t#importing Excel IronPython libraries\r\n\t    \tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n\t    \tfrom Microsoft.Office.Interop import Excel\r\n\t    \tex = Excel.ApplicationClass()\r\n\t    \tex.Visible = sender.Tag[1]\r\n\t    \tex.DisplayAlerts = False\r\n\t    \tfbd = FolderBrowserDialog()\r\n\t    \tfbd.SelectedPath = sender.Text\r\n\t    \tparent = sender.Parent\r\n\t    \tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n\t    \tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n\t    \tdataTable = dataGrid.DataSource\r\n\t    \tfptext = fptextbox.Text\r\n\t    \ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n\t    \tdr = fbd.ShowDialog()\r\n\t    \tfrstRwTtle = sender.Tag[0]\r\n\t    \tif frstRwTtle:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlYes\r\n\t    \telse:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlNo\r\n\t    \tif dr == DialogResult.OK:\r\n\t    \t\tworkbk = ex.Workbooks.Add()\r\n\t    \t\tworksheet = workbk.Worksheets.Add()\r\n\t    \t\t#Writing title and doc info\r\n\t    \t\tif sender.Tag[2]:\r\n\t\t    \t\ttitleCell = worksheet.Cells[1,1]\r\n\t\t    \t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t\t    \t\ttitleCell.Value2 = titletext\r\n\t\t    \t\ttitleCell.Font.Size = 18\r\n\t\t    \t\ttitleCell.Font.Bold = True\r\n\t\t    \t\tstartR = 3\r\n\t\t    \t\tendR = 3\r\n\t\t    \telse:\r\n\t\t    \t\tstartR = 1\r\n\t\t    \t\tendR = 0\t\r\n\t\t    \tif frstRwTtle:\r\n\t\t    \t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t    \t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t    \t\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t    \t\t\t\r\n\t\t    \telse :\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t    \t\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t\t    \txlrange.Columns.AutoFit()\r\n\t\t    \tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t\t    \tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n\t    \t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n\t    \t\tif not sender.Tag[1]:\r\n\t    \t\t\tworkbk.Close()\r\n\t    \t\t\tex.Quit()\r\n\r\n\t    def startCell(self, sender, event ):\r\n\t\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n\t    def endCell(self, sender, event ):\r\n\t    \ttry:\r\n\t\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\t\tendNum = regexEndNum(startval)\r\n\t\t\t\tif endNum != \"\":\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telse:\t\t\t\t\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\t    \t\t    \t\r\n\t    def startRowDrag(self, sender, event ):\r\n\t    \tshmak\r\n\t\t\t\r\n\t    def opendirectory(self, sender, event):\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\t\tsender.Tag = fbd.SelectedPath\r\n\t\r\n\t    def pickobjects(self, sender, event):   \r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t#THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n\t    def pickautocadobjects(self, sender, event):   \r\n\t\t\tselelem = []\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\t\r\n\t\t\t\tacadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n\t\t\t\tselection_ = acadDoc.ActiveSelectionSet\r\n\t\t\t\tacadDoc.SendCommand(\"(setq ss nil) \")\r\n\t\t\t\tif acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n\t\t\t\t\tfor sel in selection_:\t\t\t\t\r\n\t\t\t\t\t\tselelem.append(sel)\t\t\r\n\t\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tsender.Tag = list(selelem)\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickautocadobject(self, sender, event):   \r\n\t\t\tselelem = None\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", 5)\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n\t\t\t\tacadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")\t\t\r\n\t\t\t\tselection_ = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tselelem = acadDoc.HandleToObject(selection_)\r\n\t\t\t\tsender.Tag = selelem\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickobjectsordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = output\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t    \r\n\t    def pickobjectsofcatordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = (output)\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobjects(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\t\r\n\r\n\t    def pickobject(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobject(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\t\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickobjectsofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def pickobjectofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickfaces(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\t\tfor s in selface:\r\n\t\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\t\tfaces.append(f)\r\n\t\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickpointsonface(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\t\tpoints = []\r\n\t\t\tfor s in selpoints:\r\n\t\t\t\tpt = s.GlobalPoint\r\n\t\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\t\tsender.Tag = points\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickedges(self, sender, event):\r\n\t\t\tedges = []\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\t\r\n\t\t\ttry:\t\t\t\t\r\n\t\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\t\tfor s in seledge:\r\n\t\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\tedges.append(e)\r\n\t\t\t\tsender.Tag = edges\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def colorpicker(self, sender, event):\r\n\t\t\tdialog = ColorSelectionDialog()\r\n\t\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\t\tselected = dialog.SelectedColor\r\n\t\t\tsender.Tag = selected\r\n\t\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\r\n\t    def topmost(self):\r\n\t\t\tself.TopMost = True\r\n\t\r\n\t    def lvadd(self, sender, event):\r\n\t\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\t\r\n\t    def scroll(self, sender, event):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tchild = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n\t\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n\t    def openurl(self, sender, event):\r\n\t\t\twebbrowser.open(sender.Tag)\r\n\t\r\n\t    def selectall(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = True\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t    def selectnone(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = False\r\n\t\t\telse:\r\n\t\t\t\tpass\t\t\r\n\r\n\t    def updateallnone(self, sender, event):\r\n\t    \ttry:\r\n\t    \t\tparent = sender.Parent\r\n\t    \t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n\t    \t\trbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n\t    \t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n\t    \t\t\trball.Checked = True\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = True\t    \t\r\n\t    \t\telse :\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\r\n\t    def zoomcenter(self, sender, event ):\r\n\t\t\tif event.X > 15:\t    \r\n\t\t\t\ttry:\r\n\t\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\t\tuidoc.ShowElements(element)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\t\r\n\t    def setviewforelement(self, sender, event ):    \r\n\t\t\tif event.X > 15*xRatio:\t    \t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\t\tglobal viewindex\r\n\t\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\t\tid = [element.Id]\r\n\t\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\t    \r\n\t\t\t\tpass\r\n\r\n\r\n\t    def CheckChildren(self, sender, event ):\r\n\t\t\tevNode = event.Node\t    \r\n\t\t\tcheckState = evNode.Checked\t\r\n\t\t\tfor n in event.Node.Nodes:\t   \t\r\n\t\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\t\r\n\t    def ActivateOption(self, sender, event ):\r\n\t    \tparent = sender.Parent\r\n\t    \tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n\t    \trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n\t    \tif sender.Checked:\r\n\t    \t\tassociatedControls.Enabled = True\r\n\t    \t\tfor c in restofcontrols:\r\n\t    \t\t\tc.Enabled = False\r\n\t    \t\tparent.Tag = sender.Text\r\n\t    \t\t\r\n\t    def showtooltip(self, sender, event ):\r\n\t    \tttp = ToolTip()\r\n\t    \tttp.AutoPopDelay = 10000\r\n\t    \tttp.SetToolTip(sender , sender.Tag)\t\r\n\r\n\t    def numsOnly(self, sender, event ):\r\n\t    \tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n\t    \t\tevent.Handled = True\r\n\t    \r\n\t    def chart_showLabels(self, sender, event):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor s in chart1.Series:\r\n\t\t\t\tif s.ChartType == SeriesChartType.Pie:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Disabled\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = False\r\n\t    \t\t\r\n\t    def imageexport(self, sender, event):\r\n\t    \timport datetime\r\n\t    \tfrom datetime import datetime\r\n\t    \tfrom RevitServices.Transactions import TransactionManager\r\n\t    \t#Modify resolution before the render\r\n\t    \tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t    \toriginalFont = Font(fontFam,8)\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \toriginalTitleFont = chart1.Titles[0].Font\r\n\t    \toriginalWidth = chart1.Width\r\n\t    \toriginalHeight = chart1.Height\r\n\t    \tchart1.Visible = False\r\n\t    \tchart1.Dock = DockStyle.None\r\n\t    \tchart1.Width = 2100 * 0.8\r\n\t    \tchart1.Height = 1500 * 0.8\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n\t    \tchart1.BackColor = Color.White\r\n\t    \tchart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.White\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = Font(fontFam, 30)\r\n\t\t    \tfor p in serie.Points:\r\n\t\t    \t\tp.Font = Font(fontFam, 30)\r\n\t\t    \t\tp.MarkerSize = 15\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = Font(fontFam, 30)\r\n\t    \t\tlegend.BackColor = Color.White\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n\t    \t#Get back to original settings\r\n\t    \tchart1.Width = originalWidth\r\n\t    \tchart1.Height = originalHeight\r\n\t    \tchart1.BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n\t    \tchart1.Titles[0].Font = originalTitleFont\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = originalFont\r\n\t    \t\tfor p in serie.Points:\r\n\t    \t\t\tp.Font = originalFont\r\n\t\t    \t\tp.MarkerSize = 8\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = originalFont\r\n\t    \t\tlegend.BackColor = Color.Transparent\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.Visible = True\r\n\t    \t#Import the picture in a Drafting View\r\n\t    \t#Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021\t    \t\r\n\t    \ttry:\r\n\t    \t\timportOptions = ImageImportOptions()\t\r\n\t    \t\timportOptions.Resolution = 72\r\n\t    \t\timportOptions.Placement = BoxPlacement.TopLeft\t    \t\t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption = ImageTypeOptions()\t\r\n\t    \t\timageTypeOption.Resolution = 72\r\n\r\n\t    \tcollector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n\t    \tviewFamilyTypes = []\r\n\t    \tfor c in collector:\r\n\t    \t\tif c.ViewFamily == ViewFamily.Drafting:\r\n\t    \t\t\tviewFamilyTypes.append(c)\r\n\t    \tviewFamilyType = viewFamilyTypes[0]\r\n\t    \tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t    \tdraftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n\t    \tdraftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n\t    \timagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n\t    \tnewElement = clr.StrongBox[Element]()\r\n\t    \ttry:\r\n\t    \t\tdoc.Import(imagePath,importOptions,draftView,newElement)\t    \t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption.SetPath(imagePath)\r\n\t    \t\timageType = ImageType.Create(doc,imageTypeOption)\r\n\t    \t\tplacementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n\t    \t\tImageInstance.Create(doc,draftView,imageType.Id,placementOptions)\t    \t\t\r\n\t    \tTransactionManager.Instance.TransactionTaskDone()\r\n\t    \t\t    \t\r\n\t    def chart_showLegend(self, sender, event ):\r\n\t    \tcb = sender\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \tif len(chart1.Legends) <= 1:\r\n\t    \t\tfor legend in chart1.Legends:\r\n\t    \t\t\tif cb.Checked:\r\n\t    \t\t\t\tlegend.Enabled = True\r\n\t    \t\t\telse:\r\n\t    \t\t\t\tlegend.Enabled = False\r\n\t    \telse:\r\n\t    \t\tif cb.Checked:\r\n\t    \t\t\tchart1.Legends[1].Enabled = True\r\n\t    \t\telse:\r\n\t    \t\t\tchart1.Legends[1].Enabled = False\r\n\t\t    \t\t\r\n\r\n\tclass mylistview(ListView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\r\n\tclass mytrackbar(TrackBar):\r\n\t\r\n\t\tdef __init__(self,startval,step):\r\n\t\t\tself.startval = startval\r\n\t\t\tself.step = step\r\n\r\n\tclass myDataGridView(DataGridView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.startcell = {}\r\n\t\t\tself.endcell = {}\r\n\t\t\t\r\n\tclass mygroupbox(GroupBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\t\t\t\r\n\tclass myTextBox(TextBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself._isNum = False\r\n\t\r\n\t\t\t\r\n\t#Form initialization\r\n\t\r\n\tform = MultiTextBoxForm()\r\n\txRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n\tif xRatio == 0:\r\n\t\txRatio = 1\r\n\tyRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n\tif yRatio == 0:\r\n\t\tyRatio = 1\r\n\tform.topmost()\t\r\n\tform.ControlBox = True\r\n\txlabel = 25 * xRatio\r\n\txinput = 150 * xRatio\r\n\tformy = 10 * yRatio\r\n\tif IN[8] * xRatio > (350 * xRatio):\tformwidth = IN[8] * xRatio\r\n\telse: formwidth = 350 * xRatio\r\n\tfields = []\r\n\terror = 0\r\n\t\r\n\t#Description \r\n\t\r\n\tif IN[3] != \"\":\r\n\t\tdes = Label()\r\n\t\tdes.Location = Point(xlabel,formy)\r\n\t\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\t\t\r\n\t\tdes.AutoSize = True\r\n\t\tdes.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n\t\tdes.Text = IN[3]\r\n\t\tform.Controls.Add(des)\r\n\t\tformy = des.Bottom + (15*xRatio)\r\n\tformheaderheight = formy\r\n\t\r\n\t#Input form\r\n\t\r\n\t# Create a container panel for all inputs\r\n\tbody = Panel()\r\n\tbody.Location = Point(0,formy)\r\n\tbody.Width = formwidth - 15*xRatio\r\n\t\r\n\t\r\n\t# Process form inputs\r\n\tif isinstance(IN[0],list):\r\n\t\tinputtypes = IN[0]\r\n\telse:\r\n\t\tinputtypes = [IN[0]]\r\n\t# This definition is to handle the sorting of special characters\r\n\tdef remove_accents(input_str):\r\n\t    nfkd_form = unicodedata.normalize('NFKD', input_str)\r\n\t    only_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n\t    return only_ascii\t\r\n\r\n\t#Adding Logo \r\n\t#default logo in case no input\t\r\n\tdef getImageByName(ImName):\r\n\t\tdynamo = Assembly.Load('DynamoCore')\r\n\t\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\t\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\t\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\t\tlogopaths = []\r\n\t\tfor child in root:\r\n\t\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\t\tfor path in child:\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\tdeflogopath = \"\"\r\n\t\tfor path in logopaths:\r\n\t\t\tif deflogopath == \"\":\r\n\t\t\t\tif os.path.isfile(path):\r\n\t\t\t\t\tdeflogopath = path\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\t\treturn ima,bmp\r\n\t\t\t\t\texcept: \r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\ttry:\r\n\t\tif IN[4] != '':\r\n\t\t\ttry:\r\n\t\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\t\texcept:\r\n\t\t\t\tima = IN[4]\r\n\t\t\t\tbmp = IN[4]\r\n\r\n\t\telse :\r\n\t\t\t_ims = getImageByName(\"a.png\")\r\n\t\t\tima = _ims[0]\r\n\t\t\tbmp = _ims[1]\r\n\t\t\t\r\n\t\tlogo = Panel()\r\n\t\tif IN[6] == None:\r\n\t\t\txlogo = 20 * xRatio\r\n\t\t\tylogo = formy+ 10*yRatio\r\n\t\telse:\r\n\t\t\txlogo = 30 * xRatio\r\n\t\t\tylogo = formy\r\n\t\tsize = 110 * xRatio\r\n\t\tlogo = PictureBox()\r\n\t\tratio = (ima.Height)/(ima.Width)\r\n\t\th = float(ima.Height)\r\n\t\tw = float(ima.Width)\r\n\t\tratio = h/w\r\n\t\tlogo.Size = Size(size,size*ratio)\r\n\t\tscaledimage = Bitmap(size,size*ratio)\r\n\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\t\tlogo.Image = ima\r\n\t\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\tform.Controls.Add(logo)\r\n\t\tlogo.Location = Point(xlogo,ylogo)\r\n\t\t\r\n\t\t\r\n\t\t#Setting icon \r\n\t\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\t\tthumb.MakeTransparent();\r\n\t\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\t\tform.Icon = icon\r\n\r\n\texcept :\r\n\t\tlogo = Panel()\r\n\t\tlogo.Width = 110 * xRatio\r\n\t\tlogo.Height = 110 * yRatio\r\n\t\r\n\tdef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\t\ty = starty\r\n\t\tfor j in inputs:\r\n\t\t\tlabel = Label()\r\n\t\t\tlabel.Location = Point(xlabel,y+4*yRatio)\r\n\t\t\tlabel.AutoSize = True\r\n\t\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tlabel.Text = j.inputname\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\r\n\t\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\t\tcb = ComboBox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\t\tcb.Sorted = j._sorted\r\n\t\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\t\tcb.Tag = j\r\n\t\t\t\tif j.defaultvalue != None:\r\n\t\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\t\tformbody.Controls.Add(cb)\r\n\t\t\t\tform.output.append(cb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t#CHARTS \r\n\t\t\tif j.__class__.__name__ == 'uipiechart':\t\t\t\t\t\r\n\t\t\t\tlabels = j.xseries\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\txseries = [j.xseries]\r\n\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tlabel = SmartLabelStyle()\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Pie\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,len(xseries)):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Legend text of the points\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points: \r\n\t\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\t\t\t\t\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.IsTextAutoFit = True\r\n\t\t\t\tlegend1.LegendStyle = LegendStyle.Column\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Font = originalFont\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\thorizont = j.ishorizontal\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values,_horizont):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tif _horizont:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Bar\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Column\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.Docking = Docking.Right\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiradarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Create a panel for buttons\r\n\t\t\t\tpanelCtrls = Panel()\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\tpanelCtrls.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Radar\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelCtrls.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Show/Hide labels\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uipointchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Point\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Change marker size\r\n\t\t\t\toriginalMarkerSize = 8\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points:\r\n\t\t\t\t\t\tp.MarkerSize = originalMarkerSize\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\tchartArea1 = chart1.ChartAreas[0]\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend2 = Legend()\r\n\t\t\t\t#Add legends to charts\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\tchart1.Legends.Add(legend2)\r\n\t\t\t\t#Create Custom legend\r\n\t\t\t\tcustomevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tlegend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))\t\t\t\t\t\r\n\t\t\t\tdef chart_CustomizeLegend(sender, customevent ):\r\n\t\t\t\t\tchart1 = sender\r\n\t\t\t\t\t#legend1.Enabled = False\r\n\t\t\t\t\tlegend2.Name = \"Legend2\"\r\n\t\t\t\t\tfor s,it in zip(series,legend2.CustomItems):\r\n\t\t\t\t\t\tit.ImageStyle = LegendImageStyle.Marker\r\n\t\t\t\t\t\tit.MarkerStyle = s.MarkerStyle\r\n\t\t\t\t\t\tit.MarkerColor = s.Color\r\n\t\t\t\t\t\tit.BorderColor = Color.Transparent\r\n\t\t\t\t\t\tit.MarkerSize *= 1.3\r\n\t\t\t\tlegend1.Enabled = False\r\n\t\t\t\tlegend2.Font = originalFont\r\n\t\t\t\tlegend2.IsTextAutoFit = True\r\n\t\t\t\tlegend2.BackColor = formbody.BackColor\t\t\t\r\n\t\t\t\tchart1.CustomizeLegend += chart_CustomizeLegend\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uilinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Line\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uisplinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Spline\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibubblechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\t#panelChart.Padding = Padding(1) To create a black border\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Bubble\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\r\n\t\t\telif j.__class__.__name__ == 'uitreeview':\r\n\t\t\t\ttv = TreeView()\r\n\t\t\t\ttv.CheckBoxes = True\r\n\t\t\t\ttitles = j._hastitles\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\t\ttv.Height = j._height\r\n\t\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\t\r\n\t\t\t\tdef treeIteration(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\t\tif titles:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(tv)\r\n\t\t\t\tform.output.append(tv)\r\n\t\t\t\ty = tv.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\t\tlvp = Panel()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xinput\t\t\t\t\r\n\t\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\t\tlvp.Location = Point(xlabel,y+35*yRatio)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\telse : \r\n\t\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\t\t\t\t\r\n\t\t\t\tlvp.Height = j.height * yRatio + 25 * yRatio\r\n\t\t\t\t#Creating the listview box\r\n\t\t\t\tlv = mylistview()\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tdummyheader = ColumnHeader()\r\n\t\t\t\tdummyheader.Text = \"\"\r\n\t\t\t\tdummyheader.Name = \"\"\r\n\t\t\t\tdummyheader.Width = -2 * xRatio\r\n\t\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\t\tlv.Values = j\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlv.CheckBoxes = True\r\n\t\t\t\tlv.View = vi.Details\r\n\t\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\t\tif j.sorted :\r\n\t\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\t\tlv.Location = Point(0,0)\r\n\t\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telse:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tlv.Height = j.height * yRatio\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\t\tfor i in j.default_values:\r\n\t\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\t\tif j.highlight :\r\n\t\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\t\titems = list(lv.Items)\r\n\t\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\t\tdel items[::2]\r\n\t\t\t\t\tfor item in items:\r\n\t\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\trball = RadioButton()\r\n\t\t\t\t\trball.Location = Point(0,(j.height+5)*yRatio)\r\n\t\t\t\t\trball.Width = 100 * xRatio\r\n\t\t\t\t\trball.Height = 20 * yRatio\r\n\t\t\t\t\trball.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\t\trball.Click += form.selectall\r\n\t\t\t\t\trbnone = RadioButton()\r\n\t\t\t\t\trbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n\t\t\t\t\trbnone.Width = 100 * xRatio\r\n\t\t\t\t\trbnone.Height = 20 * yRatio\r\n\t\t\t\t\trbnone.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t\t#Adding controls to panel\r\n\t\t\t\tlvp.Controls.Add(lv)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tform.output.append(lv)\r\n\t\t\t\ty = lvp.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uimultilinetext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\ttb.Multiline  = True\r\n\t\t\t\ttb.Height = j._height * yRatio\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = tb.Bottom + 25 * yRatio\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t\t#Creating grouping panel\r\n\t\t\t\ttvp = Panel()\r\n\t\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\t\ttvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tif (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n\t\t\t\t\tautoheight = 800 * yRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tautoheight = (50 + len(j.dataList) * 15\t) * yRatio\t\t\t\r\n\t\t\t\ttvp.Height = autoheight + 73 * yRatio\r\n\t\t\t\t#Creating title\r\n\t\t\t\ttitlep = Label()\r\n\t\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\t\ttitlep.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t\t#Creating data structure\r\n\t\t\t\tdg = myDataGridView()\r\n\t\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\t\tdt = DataTable()\r\n\t\t\t\tdl = j.dataList\r\n\t\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\t\trngstart = 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\t\trow = dt.NewRow()\r\n\t\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\t\tdg.DataSource = dt\r\n\t\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\t\tdg.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tdg.Location = Point(0,23 * yRatio)\r\n\t\t\t\tdg.Height = autoheight\r\n\t\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t\t#dg.MouseUp = \t\t\t\r\n\t\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\t\ty = tvp.Bottom + 15 * yRatio\r\n\t\t\t\t#Adding export to excel button\r\n\t\t\t\tex = Button()\r\n\t\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\t\ttry:\r\n\t\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\t\texcept:\r\n\t\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\t\tex.Width = 60 * xRatio\r\n\t\t\t\tex.Height = 30 * yRatio\r\n\t\t\t\tex.Location = Point(formwidth - 125 * xRatio ,dg.Bottom + 15 * yRatio)\t\t\t\t\t\r\n\t\t\t\ttvp.Controls.Add(ex)\r\n\t\t\t\tex.Click += form.exportToExcel\r\n\t\t\t\t#Adding filepath export textbox\r\n\t\t\t\tfilepathtb = TextBox()\r\n\t\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n\t\t\t\tfilepathtb.Width = formwidth - xlabel - 125 * xRatio\r\n\t\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t\t#Adding copy to clipboard button\r\n\t\t\t\tcb = Button()\r\n\t\t\t\t#Adding panel to form\r\n\t\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\t\tform.output.append(dg)\r\n\t\t\t\ty = tvp.Bottom + 25 * yRatio\r\n\t\t\t\tform.topmost()\r\n\t\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\t\tgb = GroupBox()\r\n\t\t\t\tgb.Text = j.title\r\n\t\t\t\tgb.Parent = form\r\n\t\t\t\tgb.SendToBack()\r\n\t\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\t\ttn = Label()\r\n\t\t\t\ttn.Location = Point(xlabel,18 * yRatio)\r\n\t\t\t\ttn.AutoSize = True\r\n\t\t\t\ttn.MaximumSize = Size(formwidth - rightmargin - 50 * xRatio,0)\r\n\t\t\t\ttn.Text = j.textnote\r\n\t\t\t\ttn.BringToFront()\r\n\t\t\t\tgb.Controls.Add(tn)\r\n\t\t\t\tgb.Size = Size(formwidth  - rightmargin - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n\t\t\t\ty = gb.Bottom + 25 * xRatio\r\n\t\t\t\tformbody.Controls.Add(gb)\r\n\t\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\t\tyn = CheckBox()\r\n\t\t\t\tyn.Width = formwidth - xinput - rightmargin + 10 * xRatio\r\n\t\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\t\tyn.Text = j.booltext\r\n\t\t\t\tg = yn.CreateGraphics()\r\n\t\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formwidth - xinput - rightmargin -20 * xRatio)\r\n\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\tyn.Height = heighttext + 15 * yRatio\r\n\t\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\t\tformbody.Controls.Add(yn)\r\n\t\t\t\tform.output.append(yn)\r\n\t\t\t\ty = yn.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\t\tyrb = 20 * yRatio\r\n\t\t\t\trbs = []\r\n\t\t\t\trbgroup = mygroupbox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\trbgroup.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\trbgroup.Width = formwidth - xlabel - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\trbgroup.Tag = j\r\n\t\t\t\trbcounter = 0\r\n\t\t\t\tfor key in j.keys():\r\n\t\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\t\trb.Text = key \r\n\t\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\t\trb.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\trb.Width = formwidth - xlabel - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\trb.Location = Point(20 * xRatio,yrb)\r\n\t\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formwidth - xinput - 90*xRatio)\r\n\t\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\t\trb.Height = heighttext + 15 * yRatio\r\n\t\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\t\tyrb += heighttext + 12 * yRatio\r\n\t\t\t\t\t\trbcounter += 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\trbgroup.Height = ybot + 20 * yRatio\r\n\t\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\t\tform.output.append(rbgroup)\r\n\t\t\t\ty = rbgroup.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\t\tfp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tfp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\t\tfp.Text = j.buttontext\r\n\t\t\t\tfp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(fp)\r\n\t\t\t\tfp.Click += form.openfile\r\n\t\t\t\tform.output.append(fp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\t\tdp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tdp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.Text = j.buttontext\r\n\t\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\t\tdp.Text = j.buttontext\t\r\n\t\t\t\tdp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(dp)\r\n\t\t\t\tdp.Click += form.opendirectory\r\n\t\t\t\tform.output.append(dp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.pickobject\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectautocadelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickautocadobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click += form.pickautocadobject\t\t\t\t\t\t\t\t\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\t\tform.output.append(se)\r\n\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\t\tsf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\t\tsf.Text = j.buttontext\r\n\t\t\t\tsf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sf)\r\n\t\t\t\tsf.Click += form.pickfaces\r\n\t\t\t\tform.output.append(sf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\t\tspf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tspf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tspf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\t\tspf.Text = j.buttontext\r\n\t\t\t\tspf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(spf)\r\n\t\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\t\tform.output.append(spf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\t\tsed = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsed.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsed.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\t\tsed.Text = j.buttontext\r\n\t\t\t\tsed.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sed)\r\n\t\t\t\tsed.Click += form.pickedges\r\n\t\t\t\tform.output.append(sed)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\t\tgb = Panel()\r\n\t\t\t\tif j.defaultvalue == '':\r\n\t\t\t\t\tdefval = j.minimum\r\n\t\t\t\telse:\r\n\t\t\t\t\tdefval = j.defaultvalue\r\n\t\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tgb.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tgb.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\t\tgb.Height = 40 * yRatio\r\n\t\t\t\tsl.Minimum = 0\r\n\t\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\t\tsl.Location = Point(40 * xRatio,0)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsl.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tsl.Width = formwidth - xlabel -rightmargin - 35 * xRatio\r\n\t\t\t\tgb.Controls.Add(sl)\r\n\t\t\t\tform.output.append(sl)\r\n\t\t\t\tdisplabel = Label()\r\n\t\t\t\tdisplabel.Width = 50 * xRatio\r\n\t\t\t\tdisplabel.Location = Point(0,5 * yRatio)\r\n\t\t\t\tdisplabel.Text = str(defval)\r\n\t\t\t\tdisplabel.Height = 30 * yRatio\r\n\t\t\t\tdisplabel.BringToFront()\r\n\t\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\t\tsl.Scroll += form.scroll\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\t\tim = PictureBox()\r\n\t\t\t\tif j.showborder:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\t\telse:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\t\th = float(pic.Height)\r\n\t\t\t\tw = float(pic.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\timage_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tim.Image = pic\r\n\t\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\t\tformbody.Controls.Add(im)\r\n\t\t\t\tim.Location = Point(25 * xRatio,y+25*yRatio)\r\n\t\t\t\ty = im.Bottom + 25 * yRatio\r\n\t\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\t\tcp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\t\tcp.Text = j.buttontext\r\n\t\t\t\tcp.Height = 30 * yRatio\r\n\t\t\t\tformbody.Controls.Add(cp)\r\n\t\t\t\tcp.Click += form.colorpicker\r\n\t\t\t\tform.output.append(cp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\t\timportcolorselection = 2\r\n\t\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\t\tgrouppanel = GroupBox()\r\n\t\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\t\taddinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n\t\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\t\ty = grouppanel.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanelcond.Width = formwidth - 65 * xRatio\t\r\n\t\t\t\tform.output.append(grouppanelcond)\t\t\t\t\r\n\t\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\t\tpanlist = []\r\n\t\t\t\trblist = []\r\n\t\t\t\typ = 25 * yRatio\r\n\t\t\t\txrb = 25 * xRatio\r\n\t\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs):\t\r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\t\trb.Text = i\r\n\t\t\t\t\trb.Location\t= Point(xrb,10*yRatio)\r\n\t\t\t\t\trb.Width = 95 * xRatio\r\n\t\t\t\t\trblist.append(rb)\t\t\t\t\t\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\t\tcondition_pannel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\t\taddinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n\t\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\t\typ = condition_pannel.Bottom - 25*yRatio\r\n\t\t\t\t\txrb += 100 * xRatio\r\n\t\t\t\tfor pan in panlist:\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\t\tfor e,pan in enumerate(panlist):\r\n\t\t\t\t\tif e != j._defaultOptionIndex:\r\n\t\t\t\t\t\tpan.Enabled = False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\trblist[j._defaultOptionIndex].Checked = True\r\n\t\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n\t\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\t\tform.output.append([grouppanelcond.Tag])\t\t\t\t\r\n\t\t\t\ty = grouppanelcond.Bottom + 25*yRatio\r\n\t\t\tformbody.Height = y\r\n\r\n\r\n\t# process input lists \r\n\taddinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n\t\r\n\t#add the formbody panel to the form\r\n\tform.Controls.Add(body)\t\t\r\n\t\r\n\r\n\tif IN[6] != None:\r\n\t\tif IN[8] > 400 * yRatio:\r\n\t\t\tformy += 50 * yRatio\r\n\t\t\txinput = 270 * yRatio\r\n\t\telse:\r\n\t\t\tformy = logo.Bottom + 20 * yRatio\r\n\telse:\r\n\t\tformy += 50 * yRatio\r\n\r\n\r\n\r\n\t#Adding validation button\r\n\t\r\n\tbutton = Button()\r\n\tbutton.Text = IN[1]\r\n\tbutton.Width = formwidth - xinput - 40 * xRatio\r\n\tbutton.Height = 20 * yRatio\r\n\tbutton.Location = Point (xinput,formy)\r\n\tbutton.Click += form.setclose\r\n\tform.Controls.Add(button)\r\n\tform.MaximizeBox = False\r\n\tform.MinimizeBox = False\r\n\tform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\r\n\t#Adding Cancel button\r\n\tif IN[6] != None:\r\n\t\tcancelbutton = Button()\r\n\t\tcancelbutton.Text = IN[6]\r\n\t\tcancelbutton.Width = 120 * xRatio\r\n\t\tcancelbutton.Height = 20 * xRatio\r\n\t\tcancelbutton.Name = \"Cancel\"\r\n\t\tcancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n\t\tcancelbutton.Click += form.setclose\r\n\t\tform.Controls.Add(cancelbutton)\r\n\t\tform.CancelButton = cancelbutton\r\n\t\r\n\t#Adding link to help\r\n\t\r\n\tif IN[5] != None :\r\n\t\thelplink = LinkLabel()\r\n\t\thelplink.Text = \"Help\"\r\n\t\thelplink.Tag = IN[5]\r\n\t\thelplink.Click += form.openurl\r\n\t\thelplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n\t\tform.Controls.Add(helplink)\r\n\telse:\r\n\t\tpass\t\r\n\t\t\t\r\n\tform.ShowIcon = True\r\n\tform.Width = formwidth\r\n\tform.Height = formy + 120 * yRatio\r\n\tformfooterheight = form.Height - formheaderheight\r\n\t\r\n\t# Make formbody scrollable\r\n\t\r\n\t# if the form is longer than its maximum height, do the following:\r\n\t# modify the form height\r\n\t# make the formbody panel scrollable\r\n\tif form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n\t\tformbody_calculatedheight = IN[7] * yRatio - form.Height\r\n\t\t# make sure the formbody is at least 100 px high\r\n\t\tif formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n\t\tbody.Height = formbody_calculatedheight\r\n\t\tform.Height = form.Height + formbody_calculatedheight\r\n\t\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t\t# http://stackoverflow.com/a/28583501\r\n\t\tbody.HorizontalScroll.Maximum = 0\r\n\t\tbody.AutoScroll = False\r\n\t\tbody.VerticalScroll.Visible = False\r\n\t\tbody.AutoScroll = True\r\n\t\tbody.BorderStyle = BorderStyle.Fixed3D\r\n\telse:\r\n\t\tform.Height = form.Height + body.Height\r\n\t# Move footer elements\r\n\tlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n\tbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n\tif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n\tif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n\t#Positionning the form at top left of current view\r\n\t#In The revit environment\r\n\ttry:\r\n\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\tif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\t\t\tactiveviewid = doc.ActiveView.Id\r\n\t\t\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n\t\telse:\r\n\t\t\tactiveUIView = uiviews[0]\r\n\t\trect = activeUIView.GetWindowRectangle()\r\n\t\tform.StartPosition = FormStartPosition.Manual\r\n\t\tform.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\t\t\r\n\tif IN[2]:\r\n\t\tif importcolorselection != 2:\r\n\t\t\tApplication.Run(form)\r\n\t\t\tresult = form.values\r\n\t\t\tOUT = result,True, form.cancelled \r\n\t\telse:\r\n\t\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n\telse :\r\n\t\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\n\timport traceback\r\n\tOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "072cde053ed445518a5153c13b30f25b",
      "Inputs": [
        {
          "Id": "dfcf8fa577fb49d19983e26972c5c782",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5f38dc7043974aafbf6a9c31f9014428",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "426aa756349745aeb3f794dbb5b3f5ff",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b426e0a7b68f44e4b32054546f330020",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1720e31205742a59f422b77aa724557",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "52e5ac60b93149319d900bc90633f2f0",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "94a23d9930b34f3f8491f5274f5562bd",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c936d5f2f2574027adc8f2100d19df47",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "73b8ebc7c41a492f8a7a969d4ef4126b",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bdefed5eadd14af3a80e4d745cd692b4",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae6eb37992594f769630cb48069ae225",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "b0670d6b-5444-4a13-8b4d-62d8e7145868",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "cdbf4f498c5e4440a6082cc62e28513b",
      "Inputs": [
        {
          "Id": "c83b43667cdf4fee9147ddc1d3aa155e",
          "Name": "GeometryList",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5c8481a4468a4146b02e1a3581ac4289",
          "Name": "UniqueItems",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes all duplicate geometries from list."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi\r\n#Node-mode www.data-shapes.net 2016 elayoub.mostafa@gmail.com\r\n\r\nimport clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import*\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nfaces = []\r\ndsfaces = []\r\n\r\nfaces.append(uidoc.Selection.PickObjects(ObjectType.Face,'Select Faces'))\r\nfor f in faces:\r\n\tfor r in f:\r\n\t\te = uidoc.Document.GetElement(r)\r\n\t\tdsface = e.GetGeometryObjectFromReference(r).ToProtoType(True)\r\n\t\t[f.Tags.AddTag(\"RevitFaceReference\", r) for f in dsface]\r\n\t\tdsfaces.append(dsface)\r\n\r\n\t\t\r\nOUT = dsfaces",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "8f78173a390742a7be54e8542260f76f",
      "Inputs": [
        {
          "Id": "cce60b196a9049448dfb9c51d904d4d1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c047a1c6e2d2457eafcca4ee341c7d71",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "0a9904afa8404d6d89cad360345dcd23",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2881ecd282234a679c8cb6bae7d230c2",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n#Define list/unwrap list functions\r\ndef toList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return result\r\n\r\ndef dList(inList):\r\n    result = inList if isinstance(inList, list) else [inList]\r\n    return UnwrapElement(result)\r\n\r\n# preparing input for dynamo to revit\r\nrefs   = IN[0]\r\nfaces=[]\r\nfor r in refs:\r\n\te = uidoc.Document.GetElement(r)\r\n\tdsFace = e.GetGeometryObjectFromReference(r).ToProtoType(True)\r\n\t[f.Tags.AddTag(\"RevitRefFaces\", r) for f in dsFace]\r\n\tfaces.append(dsFace)\r\n\r\nOUT = faces",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "eb543f219b8f458ca636b30fb70eeef4",
      "Inputs": [
        {
          "Id": "b197d6873fb541b3b9f69d4964a2f45d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4c982c3f74f9403b8750baaf36713007",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSFaceSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "61a8c4eb-0904-482b-8867-2d7e554e5d7e-000c9ca9:0:INSTANCE:61a8c4eb-0904-482b-8867-2d7e554e5d7e-000c9cf7:9:SURFACE"
      ],
      "Id": "536bf5f5dd4b401d88fc570b4aa23c8b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c05831aa465645d08c35286fdf3bd10c",
          "Name": "Surface",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndef pickObjects():\r\n    faces = []\r\n    faces1 = []\r\n    elements = []\r\n    refs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Please select the Desired Face\")\r\n    for i in refs:\r\n        ele = doc.GetElement(i.ElementId)\r\n        moduleElement  = doc.GetElement(i)\r\n        face = ele.GetGeometryObjectFromReference(i).ToProtoType(True)\r\n        face1 = moduleElement.GetGeometryObjectFromReference(i)\r\n        modulTrans = face1.GetTotalTransform()\r\n        modulFace = modulTrans.ToFace()\r\n        faces.append(face)\r\n        faces1.append(face1)\r\n        elements.append(ele)\r\n    return  elements, faces, faces1, refs\r\n\r\nOUT = pickObjects()",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "c329a12bdc474291ab26f7d622de7edf",
      "Inputs": [
        {
          "Id": "259fe0a4e8f644e4b1fded5a1bf5422f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5286d7848bba4a14b5183409ee350289",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88354d7a9bce45baa7ca84538a949490",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "de34725cb45d4a27b78aabe844cdd363",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bc4859b2387a44daa9ffa9fed9ac31e6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ninList   = IN[0]\r\n\r\nfor i in inList:\r\n\tfaces = []\r\n\telements = []\r\n\tref = i.Reference()\r\n\tface = i.ToXYZ(True)\r\n\telements.append(ele)\r\n\tfaces.append(face)\r\n\r\nOUT = elements, faces",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e80f26ff0ac4450489961d4920747b06",
      "Inputs": [
        {
          "Id": "76e84355da234ed3b45119e88cdce782",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "836cb1b0853640d9b70047ab115951a2",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndef pickObjects():\r\n    faces = []\r\n    elements = []\r\n    refs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Please select the Desired Face\")\r\n    for ref in refs:\r\n        element = doc.GetElement(ref.ElementId)\r\n        geometryObject = element.GetGeometryObjectFromReference(ref)\r\n        if geometryObject:\r\n            if isinstance(geometryObject, Autodesk.Revit.DB.Face):\r\n                faces.append(geometryObject)\r\n                elements.append(element)\r\n            else:\r\n                # Handle cases where the geometry object is not a face\r\n                pass\r\n    return elements, faces, refs\r\n\r\n\r\nOUT = pickObjects()",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3f64c26689b24b20b8fba67c6e0644ca",
      "Inputs": [
        {
          "Id": "badfecbf5b784b68aa9bcead0fe1e0af",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "94820c39c178470ea85beff10efff5d2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ed7e191e8284a1cac76494c6b135e18",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[2];",
      "Id": "6adbb228d1ab48e78fa45be558112427",
      "Inputs": [
        {
          "Id": "90a0ad55907f4ca8912785380d137a2e",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8d3d6ced352542c6810ff4c939b644ca",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ninList   = IN[0]\r\nfor i in inList:\r\n\tfaces = []\r\n\tfaces1 = []\r\n\tele = doc.GetElement(i.ElementId)\r\n\tface = ele.GetGeometryObjectFromReference(i).ToProtoType(True)\r\n\tface1 = ele.GetGeometryObjectFromReference(i)\r\n\tfaces.append(face)\r\n\tfaces1.append(face1)\r\nOUT = faces, faces1",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "4158a654f2dc49a4a0d2393d5a2affbc",
      "Inputs": [
        {
          "Id": "bf52d030100c48aaa8a9463428d578ce",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "84a17833a7204242b7527d36b6452a38",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[1];",
      "Id": "b88ca4b57ad6452ab4d81805b1e64997",
      "Inputs": [
        {
          "Id": "845235f52d744fe69d61355a319d4a33",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4d94e16462a4b85bc3acc2f9cb37030",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ninList   = IN[0]\r\n\r\n\r\n\r\nfor plFace in inList:\r\n\tlst = []\r\n\trevitPlane = plFace.ToRevitType()\r\n\tlst.append(revitPlane)\r\nOUT = lst",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e9a43c97814e4448ac409deb5afd84b0",
      "Inputs": [
        {
          "Id": "6da200f229794d3d9d7b204bc9b4df6e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4e2792467c5476a80b489a390a3b44f",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "List.Flatten(x);",
      "Id": "0afe71361011445ca273be9ddbe70af2",
      "Inputs": [
        {
          "Id": "8558f9437a17428cb918c046e1dc682a",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cd41bb9d2c1445dc9ec544b38ca35d06",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.Normal",
      "Id": "11938360f7b84e31a922d689ae5f1387",
      "Inputs": [
        {
          "Id": "b6511f3eaa1e42dbbd5db343b66480a3",
          "Name": "plane",
          "Description": "Autodesk.DesignScript.Geometry.Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "982ba042dc4e458e81db845ef205e4c1",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the normal direction of the Plane.\n\nPlane.Normal: Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[2];",
      "Id": "60498adda16646ca823c04c37da18859",
      "Inputs": [
        {
          "Id": "b48baaa467c547859de3cf0aa3ed5f9e",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ec21159bbd84ba5b83c3469904b9568",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport sys \r\nimport System   \r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\") \r\nfrom Autodesk.Revit.DB import*\r\nfrom Autodesk.Revit.DB.Structure import*\r\n\r\nclr.AddReference(\"RevitAPIUI\") \r\nfrom Autodesk.Revit.UI import*\r\n\r\nclr.AddReference(\"System\") \r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Current doc/app/ui\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nview = doc.ActiveView\r\n\r\n\r\ninList   = IN[0]\r\n\r\nfor i in inList:\r\n\tfaces = []\r\n\ttags = i.Tags\r\n\tfaceRef = tags.LookupTag(\"RevitFaceReference\")\r\n\tface = elementOwner.GetGeometryObjectFromReference(faceRef)\r\n\tfaces.append(face)\r\nOUT = faces",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "53486bcff5b7446ca8e04e11866157e8",
      "Inputs": [
        {
          "Id": "a365826e80b548f9bfd5c5836d9048a0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a919651efb641b48c4de2f74b379862",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"Copyright by: vudinhduybm@gmail.com\"\"\"\r\nimport clr \r\nimport System\r\nimport math \r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import*\r\nfrom  Autodesk.Revit.UI.Selection import*\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndef pickObjects():\r\n    faces = []\r\n    faces1 = []\r\n    elements = []\r\n    refs = uidoc.Selection.PickObjects(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Please select the Desired Face\")\r\n    for i in refs:\r\n        moduleElement  = doc.GetElement(i)\r\n        face1 = moduleElement.GetGeometryObjectFromReference(i)\r\n        modulTrans = moduleElement.GetTotalTransform()\r\n        modulFace = face1.PlanarFace()\r\n        faces.append(face)\r\n        faces1.append(face1)\r\n        elements.append(ele)\r\n    return  elements, faces, faces1, refs\r\n\r\nOUT = pickObjects()",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "7e33f87fb5aa4a058301aa869a918449",
      "Inputs": [
        {
          "Id": "3b426bf9626745a88c85dcd50e7448bd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "57e62ae1f8d64fcdaa1d26e098fc8b94",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9d33f42f67534257b4aa1a0d9853a223",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "63411ec48148454a8f9ba0a181fff3ef",
      "End": "5c573d2621d847268b53d3a2430c4960",
      "Id": "f2cf8c66097342519bada07f22ef8ca9"
    },
    {
      "Start": "aa2f979c6a5d4162a7d6ec0b98cd33ea",
      "End": "424b46d22cb746008a7aa8c22a4bea61",
      "Id": "fd0c614bd078443397637c92edf5e99b"
    },
    {
      "Start": "f7d0db0cfa154325987e29fb309567ad",
      "End": "090c0761f43447eaad533065ffa730a4",
      "Id": "0e7929c876304cfdb6f3a37bd27108dc"
    },
    {
      "Start": "ec2364e7adc94a00b6a91c11cee52be7",
      "End": "e7fe9b1832f44f31b0096f73505a4c79",
      "Id": "f51957a3f5ab400981665bbde128f293"
    },
    {
      "Start": "5b69f074cbfb415ab2621044dbf7aa18",
      "End": "8c05f7edc4b846b68fed5e53fee25751",
      "Id": "74fc84e71f8740309551b7394ae75c1d"
    },
    {
      "Start": "aab30e24702144839506573b9ad64a3e",
      "End": "4d4be1a462f54326b54d105356d1376a",
      "Id": "3eb5d4a1ba3a4a11a873080ea9ef72ec"
    },
    {
      "Start": "368c9765cf1d46d4bfee9e8235c5ff15",
      "End": "bcc261caa673437a82ef1d896e76eda6",
      "Id": "43dadc92d0ee41c4895f26cf8d21675e"
    },
    {
      "Start": "53e664fe081c401599e7bcd8ab0f89a3",
      "End": "f09b50d57c6f41c487a54411c0c0882f",
      "Id": "ea705ae23a4144458b566acf92df0903"
    },
    {
      "Start": "ca8cbd2aa35647e0ba26f01f56529c9f",
      "End": "eb17de1d14ac4676931cf8ce03dc8560",
      "Id": "dec888426a6246caae29b2c87bd28643"
    },
    {
      "Start": "ca8cbd2aa35647e0ba26f01f56529c9f",
      "End": "8af6fd89839c49f3ae5744b7fa15603c",
      "Id": "0cd4480eda284951acb4d78ef457d5a3"
    },
    {
      "Start": "ca8cbd2aa35647e0ba26f01f56529c9f",
      "End": "e22de9bf97134dd2955a2cf66dd191b1",
      "Id": "db9e7b7c65e2469d8b80bf473b5e2fcf"
    },
    {
      "Start": "ca8cbd2aa35647e0ba26f01f56529c9f",
      "End": "15f831f14193413bae62f51910f5ee1f",
      "Id": "5d999b7d41644a1c98f9bb580d47000b"
    },
    {
      "Start": "965b473b4815411a9f41d1a79c958c04",
      "End": "05a6eaf345644b83a9946015b762eada",
      "Id": "ef8ff498a36347188095af5f55a085c2"
    },
    {
      "Start": "4d541fa144784b2bad600215bb901ea0",
      "End": "0614c5827a1a45239c15a23b70dbb899",
      "Id": "bc0d335c07744ff5b57fc79ebb489e0e"
    },
    {
      "Start": "d99099a12c1140dfafd47fff5e03ee3c",
      "End": "befdd31b38cc4ef18361791dac11d4c1",
      "Id": "00dc8930a70a47fc9099573b6e599aaa"
    },
    {
      "Start": "000c1c61d0614f0e9e177b7c386e2f90",
      "End": "9851afab4f564f54ace52ef26bab783f",
      "Id": "3eeb844752bb446f82f53e4903162f14"
    },
    {
      "Start": "d6f2e64c584f4e85be683173bb164084",
      "End": "05307bea0c3c43f98d5a56cf2625f2c3",
      "Id": "c2dee4d48a014d389917f2dec9eedf44"
    },
    {
      "Start": "d189638c4c8f42df878aca5e1b47016f",
      "End": "c401652050d040e092b6ec7af75626ea",
      "Id": "502324208ed74ac180ef7a960a01f701"
    },
    {
      "Start": "9e43172f74fb4c7abcb606ab51267171",
      "End": "adc34eb1af1e4977bef161f8c3fc4303",
      "Id": "0d65435dd77a498c91d6683ea3b63fa8"
    },
    {
      "Start": "6edbd4b67393498d9813190d3e280262",
      "End": "f40c60951c0040f49e8aed774c2dfb21",
      "Id": "837eb78766a948f79748b590cc08cc9a"
    },
    {
      "Start": "dda3ec9e4edf43ec825ca4f4932f8900",
      "End": "5d84f6f3e88a400495e48efd1b219957",
      "Id": "aa3566387ec84c45a7a75e728ea31327"
    },
    {
      "Start": "850f9e12230f4b0c82535ea48acd92ac",
      "End": "c94da2297b6c478993bb73aec3c864a8",
      "Id": "de957f6b629942ba82746ac7320ae8f5"
    },
    {
      "Start": "d42824cf5edc49b8871b949d613f170b",
      "End": "a05dea07ad7e4c8ebc0e59d0e575d478",
      "Id": "a120fe6c342d448bbfeef7687e4512aa"
    },
    {
      "Start": "5bb05b6b6d9c4b8c8717ceb0b779b362",
      "End": "50aeaa2a971e467790b0491414b05c2c",
      "Id": "510c6825b8ff4bc0a2d5f5ad55daf25f"
    },
    {
      "Start": "21c305434d4844348f32f4c7cc9a20d4",
      "End": "e9fd2737cfd4416fbe226554ea57dc99",
      "Id": "6635d00483944854a9dbebb5f7e47cf3"
    },
    {
      "Start": "d6000a7fbf124018bc1fd6d71c0ee0c1",
      "End": "69c271cf5ffd42a9873f2857156daf21",
      "Id": "74a420d6ac394ec49b721270b9ae5541"
    },
    {
      "Start": "069b1cc65802410b849e117c0d452ae7",
      "End": "b0dcda9942bf41249793483f83d27792",
      "Id": "43b9bbde3ab74b67bce29560fe1fe1d7"
    },
    {
      "Start": "eae438335f7043a3873264d69ad38c95",
      "End": "061ad308bceb44a2ad70ad0a2a3ae687",
      "Id": "6977a5e0a17c4bb68a0b78cb958ae5ab"
    },
    {
      "Start": "a4145a0cb4de4f2481f72695a8822f76",
      "End": "f85090aec2e542c59bb95eb0e52b54cc",
      "Id": "d08725b271c143cba9293b907a3e0f4a"
    },
    {
      "Start": "caead470ba604072960e22f74ae27369",
      "End": "73d929c521f34d939e87aa76709a000f",
      "Id": "5b06f4b79e7a48eda5dbfbfb70d78a54"
    },
    {
      "Start": "e079bed1309b49d9aff0774b11a95eb3",
      "End": "49efbdf1cb80407eae8a045796c5d287",
      "Id": "ad1b1017e1094961b13335be6f8e1d93"
    },
    {
      "Start": "75f81f05da2b488cb668eb982f649bc1",
      "End": "ed4aea76073e4fcfad89c13e40ba4114",
      "Id": "fb171d8214ac4c6c9c0db38beb7be356"
    },
    {
      "Start": "e6765fc4e8b74a9a9db654ca3e2b7a4b",
      "End": "c9e844eb2a054da28a1e11df8ffa1e63",
      "Id": "d255438522f547e19377bab714db59af"
    },
    {
      "Start": "97d233f59caa4168a2bdf0b1ee9e7cef",
      "End": "0ed51352da9d42aa919582b152a8543a",
      "Id": "26f89a009db947beb57a1d60725f38ae"
    },
    {
      "Start": "7a319e9145744bd9a934cb8147a2512a",
      "End": "0b0432c5c1db4d32a656668cdc58855c",
      "Id": "b43f1db9666c475faa50b3897849c558"
    },
    {
      "Start": "6cfb6133651e41e1a2705cbb2dc0aa2b",
      "End": "ae012ba6ccd04dafa207d3c5063f508a",
      "Id": "8e7f42feb4ce41bf86b5ec1ae63eeb96"
    },
    {
      "Start": "aa40df189e914c7ab9a5ba7c335049fc",
      "End": "d9fd8d992b1441ea959e84483f80c553",
      "Id": "2b997089611d4cab8008c2000a8c2f88"
    },
    {
      "Start": "cdddd49c1eeb4d459bea7a8a4e8ab94d",
      "End": "aa4a2204ad304560800204cc04dc9a5b",
      "Id": "001eab6673174524bfe84b3ab854bd0f"
    },
    {
      "Start": "13b547346ab24259bef5269c7c07a446",
      "End": "6eb08b61a8bf4425a7d4b92f0e1e60c8",
      "Id": "7a0ea9c2193e4948a6d8600694f01663"
    },
    {
      "Start": "aa006a9f1d64431bbfb6fdc9310c0408",
      "End": "f043816018754dd5896c16e0578daabf",
      "Id": "a7ee6f0dce4a4464b857ae711d10ad8b"
    },
    {
      "Start": "aa006a9f1d64431bbfb6fdc9310c0408",
      "End": "9c45a8031ced4c9e9616faa22c217f1a",
      "Id": "aae335a3326744e1b70591079a24e7a1"
    },
    {
      "Start": "0322cfc1e68a416295a7432b477b833c",
      "End": "e25472b77fd145498d4ee0cd7ba96202",
      "Id": "83f52b2d8c6d4794be976e6edadac78b"
    },
    {
      "Start": "d338d1754ff44fcd9daf19096811044f",
      "End": "6b20ff0a162a44bbb25a55ca951338c8",
      "Id": "6bb158b4ee424caaa85e3d455f78a44f"
    },
    {
      "Start": "7634e6c63eb74ee3ad165bc1fe6b942f",
      "End": "1ccd5bd492f447d6afd49549e4a4a2ad",
      "Id": "6e141e07c3f049a5b3967628066db286"
    },
    {
      "Start": "cf1eb5c443994a0db113b147205b9a16",
      "End": "c4cd9c25bf524320b22a6ba71e6cbba0",
      "Id": "f1d05f41957c492ba0d4cad2935e87a9"
    },
    {
      "Start": "b8e7ccd7bf3c49b6bc92c667fed2ee41",
      "End": "6962b37417c04facae1af160cf7938a5",
      "Id": "cae69db3e0f04d25ab4e1bd8abdf8874"
    },
    {
      "Start": "7669be24b4214e4a8f65ab278bd6f699",
      "End": "c0e91ab8322b493ca9f970828ace41fa",
      "Id": "be310d779e62499ea464139a56688999"
    },
    {
      "Start": "76e35255519b4513a1271bbf9ad68d24",
      "End": "18595eea2975410dae39eade27b737ce",
      "Id": "f89970b18b2e48b19c18720965765686"
    },
    {
      "Start": "76e35255519b4513a1271bbf9ad68d24",
      "End": "feb2b50fda264ed28106e9a1bbd30186",
      "Id": "bcfb5cfde8974cc39bfaaa4ce6a1ef75"
    },
    {
      "Start": "76e35255519b4513a1271bbf9ad68d24",
      "End": "060edeffd8cd4025a16df4a483fb79e7",
      "Id": "584059129ba442e48a3ced4b725abcbf"
    },
    {
      "Start": "76e35255519b4513a1271bbf9ad68d24",
      "End": "25e9c98a336247e78a13e9c212efaa44",
      "Id": "a633751177e64103904dd693e004297b"
    },
    {
      "Start": "4e3aecaec9e24e67a1e6297cf462728f",
      "End": "786cc4c49ec44e38800f5845b735078f",
      "Id": "45c9d80bf7a9412eb7f3729402e141d8"
    },
    {
      "Start": "5dbe06ab37404b1e9e92dd89fcac2848",
      "End": "85f00dddfdf342a4b6103451ece71641",
      "Id": "24234bffbd2844b2ab40ca4176dcaed3"
    },
    {
      "Start": "9e6beeafefd046119a72f6b7373d17e1",
      "End": "06dc8dafbfd346f698816cf44deb41fd",
      "Id": "5405a8af5a134caeaec0e062bb037be0"
    },
    {
      "Start": "6e5481e8b7e84a5a818e17316b16a90e",
      "End": "be887cfcc246441d86a8357f50e8fe20",
      "Id": "fe5d58368eb3490690b2d3088852fe53"
    },
    {
      "Start": "402cba1a6dfb4ce5bf5a4a2aa0626b34",
      "End": "cec7cc19e5eb470999c8efd2ac097ef1",
      "Id": "9dcf1961756b4dc982aac7fc364318bd"
    },
    {
      "Start": "751a3e7b165745779f75bdcb3dd2a1d9",
      "End": "6963b70d38a54ef1b27eff21c34147e8",
      "Id": "f1598b5de891406a9b2a0b304081e7ee"
    },
    {
      "Start": "8b0b6f6105db4377a92eb36341c7ac93",
      "End": "f54a6abdf15e4d1cbfedd2577c1a3555",
      "Id": "1b2163e059034136b3c620e67a4164a4"
    },
    {
      "Start": "81b8cb4ca5584182bd4f19fb74c85bcf",
      "End": "38f27415aba24057b9ca9566c41fd5bf",
      "Id": "0cf7a78046724bb29bf21c79800ea016"
    },
    {
      "Start": "e7b8bb38e9664dc198db032f7363452c",
      "End": "831d740f0e3640cc820b8e51f7748cad",
      "Id": "a2ce2018bc544a38b196c69cb5182ea9"
    },
    {
      "Start": "f76e2c7219bd4f1986e84c7d7ae37fb4",
      "End": "14df46ba81734064bda49f3f1f4c2ade",
      "Id": "7b2614c29fc247adb899717d642de7a8"
    },
    {
      "Start": "ee0f56951b354386be77ee0ce6a374cb",
      "End": "cee30e5dfd16421fa3e777f6338c5acf",
      "Id": "f767528b045b40f296535ed04d15a51c"
    },
    {
      "Start": "65a64b712d4947d798a91877aa778bd7",
      "End": "017d62cb3e2744f3b34634622c479136",
      "Id": "ce42328b9bba40b6ac83f2fa75980f26"
    },
    {
      "Start": "b13c1bc8844548b89e42e59a80b60454",
      "End": "228f0b37705046ae935fd03d329a86bf",
      "Id": "b2ec601431f54dce92e1bb8d2713f28c"
    },
    {
      "Start": "a2e7c91f68124ad7b943dd7e328e2a3c",
      "End": "3c7163a5844d46e5ab7f0664ce63d299",
      "Id": "61e54018df9d4ad08e4be1d3e04feda7"
    },
    {
      "Start": "af2be57c08d142928802db15bbbb866e",
      "End": "8551e0acb77348ca97d830ce754b5235",
      "Id": "aca7f3cc8a2644f3b15845a163d6a1b6"
    },
    {
      "Start": "90d54a2692ce46beadf07b2174972ea6",
      "End": "44d4ea3b319e4640b13f52c2920ff900",
      "Id": "b1590d5187f54381ab117842639c8e31"
    },
    {
      "Start": "0610d5b9e08a426d8fed5a0b013cae4a",
      "End": "145a3c42c6264be6aa657263bc2ff92b",
      "Id": "a8add9a5efb24abc999788c8250bbfb3"
    },
    {
      "Start": "f96f997052c647eb96130fcaedee6c01",
      "End": "5911110f5ff143c39760c0cd259ea69d",
      "Id": "5007a8fc82514d99b229c9ce845571b0"
    },
    {
      "Start": "ba151e5f4e8441dbb25366162cd5395d",
      "End": "da7565cf20f14520a4b91092a0e2d794",
      "Id": "fdeba585fb634b02aca69d8d02bd5916"
    },
    {
      "Start": "a062f991953747088ce3d7d3bac1b50f",
      "End": "ee5885be32a7418d8f4c0298c0716dc6",
      "Id": "006232355d6c48c9954195ff27fcfd9c"
    },
    {
      "Start": "eee2233252fa43a2902ecbbeb463352d",
      "End": "b6375cc057e34ec185a4ab813da55302",
      "Id": "82d8393fb8fc47a48ea02a42581829d4"
    },
    {
      "Start": "43e5bf3fb15d49d9b8b71d44b9270518",
      "End": "f93122c23a0649b788b68d6ab0ddda60",
      "Id": "ea9a1da0b1c94911af80f94fea8c1df4"
    },
    {
      "Start": "0ac1fcde57364fc8a0e2d9a59d56e456",
      "End": "a9738c12246e439db93f48aa5d4e47c1",
      "Id": "9663c64a13504ebd8d6ab9b2ce158d2a"
    },
    {
      "Start": "ac3a1b8a82fb42dbae8cd5f2459ab384",
      "End": "83e2145b784f493691728a35f571c02e",
      "Id": "df00d65e138245dd9d81580ce6a3ab36"
    },
    {
      "Start": "8a9a3bdc25564f2caf29b7b5525e47a4",
      "End": "c5a08dc0b1f341dea8ce32d4ecbc39db",
      "Id": "2d0a0f4386ee4501b9224cd7b96447b3"
    },
    {
      "Start": "2ad4feb1a37d4da8b438a5768077f9eb",
      "End": "47768746989542f49d3050d9920429d4",
      "Id": "255b35699c8b4c85801d26c4eccddbf0"
    },
    {
      "Start": "8a360d62beaf454d9fd74079b6bbd09d",
      "End": "ce6423d44d764ee5b660e537dd94de6d",
      "Id": "c7174f06ff4b4fd79c725ce56e54ddde"
    },
    {
      "Start": "a553b283536643a39934c8120fdb3e41",
      "End": "faf165531c704a6795ce2ad69ba70061",
      "Id": "ae33c6e10c1b4f3ab8a7a20fcb0d5ce5"
    },
    {
      "Start": "23666f42f6e74413b82b32d0dfd7f130",
      "End": "a70e9e2a902940c09017096dbd988043",
      "Id": "4ae591b0f4cf4b1cbab94b9c9874e4c1"
    },
    {
      "Start": "5c16edebb7bd4aab997f7466af665fd6",
      "End": "8e945dadf4464c598f9af42292cfc1e0",
      "Id": "381432717aa74a21af2ce3a5fc31cb5c"
    },
    {
      "Start": "f3f79e8de0c84068ba5e0baaaefd13b8",
      "End": "c28dfc56fa7a4637aa11c335bd79cc5b",
      "Id": "6c79299877d64cfb9077f47f3d88e18c"
    },
    {
      "Start": "213d081cdcc34065b19b9d3d0fba9e29",
      "End": "b197d6873fb541b3b9f69d4964a2f45d",
      "Id": "b9b3d7de6a3d434b81abcea06b695ee1"
    },
    {
      "Start": "c922cf8c2ae04cf9b5e9bdea5609338a",
      "End": "6723ad70d58c41de8f3c08d399de9d5e",
      "Id": "2f37eb9915a14ba5b631b52ffd9d279a"
    },
    {
      "Start": "c922cf8c2ae04cf9b5e9bdea5609338a",
      "End": "5719e2e477ff4a69847260efcc1779e9",
      "Id": "880eb20a5bbe4f9982893d10121e8d84"
    },
    {
      "Start": "c922cf8c2ae04cf9b5e9bdea5609338a",
      "End": "985ec9ba23264321874db9bb593460eb",
      "Id": "0a9760998cbe45228a68f3bf3e008057"
    },
    {
      "Start": "c922cf8c2ae04cf9b5e9bdea5609338a",
      "End": "49b09d7e65064aca8c75ad0caff8f100",
      "Id": "ba7f4e895b3f49739914fa7fc6f141be"
    },
    {
      "Start": "a7144a8fc57a4485a4d3ab14034db147",
      "End": "158a77ca3ee6426e831591aa9a63f79d",
      "Id": "a14154ce0b944a67a92b0c08a245a4ba"
    },
    {
      "Start": "a7144a8fc57a4485a4d3ab14034db147",
      "End": "b1a95903baf44335a6d7673b8c1eaa91",
      "Id": "ff2c35d5251f4de0b7fd0cfef16a2e26"
    },
    {
      "Start": "a5fb998d81c348c3a782eafb3589d153",
      "End": "160683fbd201410ea8dfcbefba8fdfb8",
      "Id": "dd0e93c1c3854aa19c243a7e096dbb49"
    },
    {
      "Start": "c87ed8f09f2844bd92766070439caf4d",
      "End": "741bd644719740e5a8fb1a7ae19c7d56",
      "Id": "976781572f30403ab803c3c9e46f0442"
    },
    {
      "Start": "b358311068f840afa6f23f4686ffec60",
      "End": "b317914ae32a48cd9a49c3dc4876b4df",
      "Id": "b51c4278c235443ebe666a2d334f2c2c"
    },
    {
      "Start": "b358311068f840afa6f23f4686ffec60",
      "End": "7b8434cf6c3641f9bac1d2b64723bec4",
      "Id": "393c1141cbf94e13ad60a3e3182c48e2"
    },
    {
      "Start": "2777594e11c4454ea5db8391f58fe04b",
      "End": "2d88809ce0fd48a78b45c168f3cec597",
      "Id": "ae7bd1d9622643c8aa36a74d64b4607c"
    },
    {
      "Start": "2777594e11c4454ea5db8391f58fe04b",
      "End": "35e74dce020c4755aa1983fd753a38f2",
      "Id": "3f3fb5065d9145c4a9301260560a87da"
    },
    {
      "Start": "2777594e11c4454ea5db8391f58fe04b",
      "End": "8b2ff0a648c142e9b5a9238052d9c785",
      "Id": "7e019aafeac143d3a21785b0c21e55be"
    },
    {
      "Start": "b73e46bf32524ff79bab2356d33c1bf9",
      "End": "f5350ff306c84732986b30da9dff871e",
      "Id": "0bb328121263407a9c1fa4328af8dbad"
    },
    {
      "Start": "b73e46bf32524ff79bab2356d33c1bf9",
      "End": "fdd258e3accf478781307168c531e442",
      "Id": "2b97404d02b2428295143542fc8502fe"
    },
    {
      "Start": "b73e46bf32524ff79bab2356d33c1bf9",
      "End": "6b9378aeca0940e2bc077c639448849a",
      "Id": "c157c3c5393b44b79ce59714cac1c009"
    },
    {
      "Start": "d6402e8d299e4e5d8535bd4ab295ec7a",
      "End": "ea93b21822594418afd1c9e3fbc2f800",
      "Id": "bd88c37db4f441118cb504f0526e1b89"
    },
    {
      "Start": "c7897651baec470487da69ad49dae0ac",
      "End": "862af45058ed45c98f611991cecdc8de",
      "Id": "a125858f64ca4d21bf6ea91be5a0efbc"
    },
    {
      "Start": "22fbd1ab82224920841f94f8a6fb8890",
      "End": "4252d219edde4c6484f02a55acc4722d",
      "Id": "70c2f24c79da480dacbe1744245a35f0"
    },
    {
      "Start": "2881ecd282234a679c8cb6bae7d230c2",
      "End": "8d9d6ce2ac5a49729dc2af54edf6a8e7",
      "Id": "cdc3e30fbfa84f259e0e768726f2eccf"
    },
    {
      "Start": "88354d7a9bce45baa7ca84538a949490",
      "End": "845235f52d744fe69d61355a319d4a33",
      "Id": "3e80b7fda44f40f7860515fccc6076a7"
    },
    {
      "Start": "88354d7a9bce45baa7ca84538a949490",
      "End": "b48baaa467c547859de3cf0aa3ed5f9e",
      "Id": "cb7e57f53f604c79b33d428face659d6"
    },
    {
      "Start": "bc4859b2387a44daa9ffa9fed9ac31e6",
      "End": "259fe0a4e8f644e4b1fded5a1bf5422f",
      "Id": "ec548860497541c89fe1d08b7a99ec14"
    },
    {
      "Start": "bc4859b2387a44daa9ffa9fed9ac31e6",
      "End": "3b426bf9626745a88c85dcd50e7448bd",
      "Id": "d2f2d300cc714a3891cb1402f65b1ebe"
    },
    {
      "Start": "0ed7e191e8284a1cac76494c6b135e18",
      "End": "90a0ad55907f4ca8912785380d137a2e",
      "Id": "648eb076530e49088c627e99f63458cd"
    },
    {
      "Start": "8d3d6ced352542c6810ff4c939b644ca",
      "End": "bf52d030100c48aaa8a9463428d578ce",
      "Id": "1a0ce4de54dd4610b9d194fc21fde23c"
    },
    {
      "Start": "d4d94e16462a4b85bc3acc2f9cb37030",
      "End": "8558f9437a17428cb918c046e1dc682a",
      "Id": "defb0625e03946f88a31c7d52a2b6e72"
    },
    {
      "Start": "cd41bb9d2c1445dc9ec544b38ca35d06",
      "End": "6da200f229794d3d9d7b204bc9b4df6e",
      "Id": "752f7c1301a946bfa14c9bb2faddd8d2"
    },
    {
      "Start": "cd41bb9d2c1445dc9ec544b38ca35d06",
      "End": "a365826e80b548f9bfd5c5836d9048a0",
      "Id": "53afb252aa6a4f5080aca387e7671b90"
    }
  ],
  "Dependencies": [
    "51d48f18-d73d-4b69-94e8-9d7891ce1467",
    "d690e21a-04c6-480d-9df7-5b7f90f342e2",
    "466724f9-62a4-492c-96ce-86623e057c14",
    "8b85c922-eb07-4612-8da6-7ce5b94c047e",
    "af67eda4-5aac-4cb7-b561-67a6e7e4c72e",
    "94faf09e-43e8-4613-8621-151dcb9b0931",
    "04c999eb-e740-4a29-84fb-63fd8871aad7",
    "6eaab507-a7b2-41c9-b398-99ccd3293c89",
    "899925a0-68f3-4029-99b9-876992f37e25",
    "d5ab45d3-040c-46c6-9aa7-45c75aed4a19",
    "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
    "b0670d6b-5444-4a13-8b4d-62d8e7145868"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Duynamo",
      "Version": "2022.12.24",
      "ReferenceType": "Package",
      "Nodes": [
        "b1139b437d7e4bd88e09c65a7983f0a7",
        "87396469d0644adbae8d4ba2f6a566ad",
        "e8ec937ef8a94fbfbc74bba829ab2c79",
        "8d29635ed9ac453f8bb5f57a5f6dc798",
        "d9d0b0d666ca4fb6a86b6f4e168acfa5",
        "f2f88c364fe2423894234ff2ec0002f1",
        "a2e68794597e4cb390ff856d2864e26b",
        "03e0a43c69a54619a8748a65687d3664",
        "36932540fab7456bbffeea9a8c12f7e9",
        "482f9e1345044396aa3a4f5981325699"
      ]
    },
    {
      "Name": "BIM3DM",
      "Version": "2.1.9",
      "ReferenceType": "Package",
      "Nodes": [
        "03c8e1e3ce72402284cc328ac33328d4"
      ]
    },
    {
      "Name": "Data-Shapes",
      "Version": "2022.2.103",
      "ReferenceType": "Package",
      "Nodes": [
        "b4572c16682c4aee9ffd9dacd0e1e1ab",
        "4d97982279da4b84838b743c2029fdba",
        "cdbf4f498c5e4440a6082cc62e28513b"
      ]
    }
  ],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 10000.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 252.80865478515625,
      "EyeY": 31784.990234375,
      "EyeZ": 6075.40576171875,
      "LookX": 674.35345458984375,
      "LookY": -39251.35546875,
      "LookZ": -13360.859375,
      "UpX": 0.04311637207865715,
      "UpY": 0.51802778244018555,
      "UpZ": -0.85427641868591309
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Select Model Elements",
        "Id": "b806c7b3690b44a39df21db9d542cbad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -68.16494750740253,
        "Y": 3139.7394853027013
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "8f03552daf6f45f1b156593a009d9954",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -298.91377691614883,
        "Y": 3139.9560356908678
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Element",
        "Id": "91bad5f8fd3c42ac96c0880020ea1db1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -72.305978711193347,
        "Y": 3417.6788435995618
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "d0e4e8d8aaf149c79d5e74e189906fd6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -294.04157472222505,
        "Y": 3415.8924532326814
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Element",
        "Id": "1d5ea0a6521e4e0db55c849f5638ca66",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -87.7710920445545,
        "Y": 3664.1273034825426
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "f0f890775dd8460fbd7de3d039a95f7c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -310.73519867757818,
        "Y": 3664.251106324491
      },
      {
        "ShowGeometry": true,
        "Name": "ToProtoType()_Level3",
        "Id": "f605c4859458481292ce590bbe919155",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 235.67961993867198,
        "Y": 3629.2633215788451
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Element",
        "Id": "f2755cfe73a04bbca9f1250c14b2d79a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -48.556535894460353,
        "Y": 4105.4837663285489
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "64428c539a11447aa465d2a4cdc90ea7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -272.22743163030418,
        "Y": 4104.4851473240215
      },
      {
        "ShowGeometry": true,
        "Name": "ToProtoType()_Level3",
        "Id": "a8bf8e1bd3484a76b6c7c1df36353a23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 274.18738698594677,
        "Y": 4069.4973625783759
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Element",
        "Id": "e461836530114b6ebf9794d0fba5fe22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -26.515323237209429,
        "Y": 4502.8074356224251
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "7e894e8322de4992bfb87037f0cf952d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -267.90038499517937,
        "Y": 4510.665899628968
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "85af11ccb5774ada99568c42baf83e6d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -333.63130955481938,
        "Y": 5832.18003500675
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "36a669b68b94461e93d8c9ee477a5b76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 163.28891514257123,
        "Y": 5825.9211765725158
      },
      {
        "ShowGeometry": true,
        "Name": "IF Code block ",
        "Id": "ed02b04f53f640fba63fd13ae2d5f3b4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -60.0866391016375,
        "Y": 5328.7343246523387
      },
      {
        "ShowGeometry": true,
        "Name": "Wait For",
        "Id": "d1fda400c7fa4d548db9745529a91d41",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -295.50925867342517,
        "Y": 4967.4370737091476
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "62d51a6e000d4569ae2e20338b851eb2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -297.05236961228775,
        "Y": 5365.5888669451288
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d50ae33d56184ca8b3cef2f9b0f9a091",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -294.0866391016375,
        "Y": 5203.7343246523387
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "697b9ce9724a43318f909061ef2e88d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -340.07387041317179,
        "Y": 6259.890186663144
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "65a19d33225c4a39b982f317f3c53dad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 246.06316627053025,
        "Y": 6258.59887497093
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8edf4ecfc00346b09a786681f694c3ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 463.6625668763204,
        "Y": 6258.59887497093
      },
      {
        "ShowGeometry": true,
        "Name": "Flatten by import DSCoreNodes class",
        "Id": "4640c1db49434b91a6c867f820d5b451",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 206.68673181146085,
        "Y": 6391.2231833112846
      },
      {
        "ShowGeometry": true,
        "Name": "Flatten by hasattr and isinstance function",
        "Id": "e776708e2a75491a9b18e46f9c6dcb2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 209.77456890756571,
        "Y": 6570.0962312916708
      },
      {
        "ShowGeometry": true,
        "Name": "Flatten by import collections class",
        "Id": "018bcdd3558542f5aaa88b1f722c8bc7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 227.25391989323396,
        "Y": 6776.1624085507738
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Element",
        "Id": "c8168253b7724d7b91e6f7d57b0ef7e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 974.50675115750073,
        "Y": 4417.2983335776853
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "92c4d1a573e840ca95618ba3e144fe86",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 733.12168939953085,
        "Y": 4429.7575652879368
      },
      {
        "ShowGeometry": true,
        "Name": "ToProtoType()_Level3",
        "Id": "3f843941c3554a90b043f89889e224a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1297.2506740379079,
        "Y": 4381.3119298275151
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "ce70da41195c49b0a0ce781d72bb3a4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -420.21593950935505,
        "Y": 2725.3709673729913
      },
      {
        "ShowGeometry": true,
        "Name": "logicIf",
        "Id": "b1139b437d7e4bd88e09c65a7983f0a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 928.329314518312,
        "Y": 3370.9802268917829
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "eaa972fd85224552a6dfdab807427e55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 709.60526057879156,
        "Y": 3340.7434034509697
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3fd3454171ec40daad3ace4da5822557",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 584.25238598139822,
        "Y": 3341.6244534630805
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "41e7a2c27dc04c0989460bd93b5db3ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1177.3146708714503,
        "Y": 3399.41909290578
      },
      {
        "ShowGeometry": true,
        "Name": "pickObjects",
        "Id": "87396469d0644adbae8d4ba2f6a566ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -178.88857047649753,
        "Y": 2726.2295124000452
      },
      {
        "ShowGeometry": true,
        "Name": "getElementsDBSolid",
        "Id": "e8ec937ef8a94fbfbc74bba829ab2c79",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 121.20635316933453,
        "Y": 2746.3167816585656
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "eb192327a5d24ad7854aef5788c531d9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -689.127666730777,
        "Y": 593.87537943812072
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "823af2a7e719461ab94c1f12f377e9ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -441.28937633488169,
        "Y": 632.64067905960155
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "4a9bc27f68354331ae06f6fe80926fa0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -893.32872074868146,
        "Y": 537.049723490067
      },
      {
        "ShowGeometry": true,
        "Name": "getPlanarFromSolid",
        "Id": "8d29635ed9ac453f8bb5f57a5f6dc798",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 383.92746863395973,
        "Y": 2756.7466628237426
      },
      {
        "ShowGeometry": true,
        "Name": "ConversionRtD",
        "Id": "03c8e1e3ce72402284cc328ac33328d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 657.000489385055,
        "Y": 2739.8900805537392
      },
      {
        "ShowGeometry": true,
        "Name": "FlattenToLevel",
        "Id": "d9d0b0d666ca4fb6a86b6f4e168acfa5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 985.56662274302562,
        "Y": 2747.8821657590288
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "81924301647f4b0dbc7cc52a9dca4321",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -466.59046719419189,
        "Y": 2463.7964842014826
      },
      {
        "ShowGeometry": true,
        "Name": "pickMultiFaces",
        "Id": "f2f88c364fe2423894234ff2ec0002f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -251.5194798790634,
        "Y": 2424.7566050917048
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4090c20d55f64172bfdb659a06109d56",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 115.15924693587453,
        "Y": 2416.8222984370032
      },
      {
        "ShowGeometry": true,
        "Name": "pickPoints",
        "Id": "a2e68794597e4cb390ff856d2864e26b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -262.40749290475537,
        "Y": 2182.6914164935579
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "beaf83b655a24b449d81a844a26c168e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -456.89735869273852,
        "Y": 2191.1949934347076
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ccb95727e0a14a448ce79a989dbfb91f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 176.15695525523449,
        "Y": 2184.4669771204381
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b4abe8c85aff40d9bacf5d75459b2ad1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 777.52129688890273,
        "Y": 1594.7129223877712
      },
      {
        "ShowGeometry": true,
        "Name": "retriveAllElementInActiveView",
        "Id": "53bf4929455a4ddcaac7195a943d1cac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 470.51993650792616,
        "Y": 1589.7206633129833
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "d1772f92971647b4bcdd7823afd6f057",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 317.7121678709579,
        "Y": 1610.5887024335998
      },
      {
        "ShowGeometry": true,
        "Name": "rectangleSelectAndFilter",
        "Id": "bef6bce77bca4fef982d1379eb927f4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -407.18771012649086,
        "Y": 1643.8994584852867
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "71c31e6f5dfd4c828496ebf20e928dbe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -599.64742551067593,
        "Y": 1637.9365924429042
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "f419439c0d324105942ad086cd6797c1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 829.38652516566071,
        "Y": 2083.6466769162507
      },
      {
        "ShowGeometry": true,
        "Name": "rectangleSelectAndFilter",
        "Id": "762c56a7162949b4a09a62d5472f4437",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1101.1671190208724,
        "Y": 1649.3170807661591
      },
      {
        "ShowGeometry": true,
        "Name": "filteredElementCollection",
        "Id": "0ab710febe524388870be6c23085f10c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -392.22315957472904,
        "Y": 1379.5259125980951
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "6bdfbb4f8f254d98a09120d39a319a11",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -607.0517583051269,
        "Y": 1380.0874861392895
      },
      {
        "ShowGeometry": true,
        "Name": "rectangleSelectAndFilter",
        "Id": "13e0bf348b5d461d931aee4c5f40225c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 2570.779186890391,
        "Y": 2077.2478522251577
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b0f2f4ad54d54be8a05e56ab312d4881",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1417.91712013232,
        "Y": 2151.88524715698
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5cc4961be8f746719506641907263e8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1298.3733462125388,
        "Y": 1932.868713544281
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9062acbc61a241649ceba759dddd60c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2002.2253358952225,
        "Y": 1986.2828474878957
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3ba599df30804c71ba2f4e4123bee02a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1662.1007410270138,
        "Y": 1806.1245948682092
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "fb56ed94fa36419cab85de2500d1e28b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1768.6210282328352,
        "Y": 1983.9223540616645
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "dfeae252008f4ae59b72a2acab4e1dda",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2231.6833636310062,
        "Y": 2016.935950583495
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4faa7046e04548f98fd397f20d602eb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1492.1833140103765,
        "Y": 2518.5038750046706
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "0ae2610a5a0e40d0a924529f6626829e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1747.9027216354002,
        "Y": 2302.1939275887134
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6cc9f457d1f3485a917dc1ae93d508d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1985.7699823420535,
        "Y": 2318.9467799261442
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ec5d214f2aa24166b7667c1988f508db",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2226.8583034951725,
        "Y": 2246.5882579623449
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f789b09b78074adfa815ba1a483342df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2937.8668243471034,
        "Y": 2141.7764572508408
      },
      {
        "ShowGeometry": true,
        "Name": "@@@",
        "Id": "561329beea7f4061bdbc71099c2a51f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3100.931247205503,
        "Y": 2403.5619746605707
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "a7f047423c7744298865766588f8ef3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1940.2580822983264,
        "Y": 2921.4235478624119
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c5f4ef7d3eb34cb5a850aac6266007ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2219.7305226027397,
        "Y": 2732.4397480483203
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "8e32bbc9b37e48a29688732acddd6959",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2548.4268607164413,
        "Y": 2390.9593171394772
      },
      {
        "ShowGeometry": true,
        "Name": "@@@",
        "Id": "ded40264236b45fd8440861162c176bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 2900.8595478289335,
        "Y": 2397.6398948851679
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6a20d92271d34e4c980a7018ea9d710b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3228.4302773433069,
        "Y": 2559.4895249675847
      },
      {
        "ShowGeometry": true,
        "Name": "@@",
        "Id": "3c8d266c5ed646b1bd2decba6e51930a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 3336.5551339600365,
        "Y": 2906.0415275779787
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b40913f1de964ce48d256da001005b67",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2438.3069928464683,
        "Y": 2954.3703493225594
      },
      {
        "ShowGeometry": true,
        "Name": "getAllPipingSystemInActiveView",
        "Id": "3219f23ebb124eb59590da47c70833f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3227.4665101997,
        "Y": 3169.9274130291792
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ff48d3072b8b42188eddfa96472c3b33",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2924.0,
        "Y": 3242.0
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "a515732be6f740199e2960e8ee8a864d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3059.4927332549141,
        "Y": 3167.9949684910061
      },
      {
        "ShowGeometry": true,
        "Name": "getAllPipingSystemInActiveView",
        "Id": "9b684ed9156a4345ababe39edb7f2cd4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3647.403369527598,
        "Y": 3596.8543430693085
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "da22a36bcbe74969b9a58c4eda3f4ca3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3472.39974408941,
        "Y": 3532.5959234480856
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "dcd2dbfa4ead4150b1df2cbfb2ff5935",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -121.97415680516599,
        "Y": 531.06791609519712
      },
      {
        "ShowGeometry": true,
        "Name": "filterAndIsolateElementByBuiltinCategory",
        "Id": "03e0a43c69a54619a8748a65687d3664",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2709.66754831826,
        "Y": 3431.6085379156857
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "c3d6e0c6c8ff48618280046aa7380442",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -1017.1623750389392,
        "Y": 637.30200357854835
      },
      {
        "ShowGeometry": true,
        "Name": "Number",
        "Id": "3eadc3f95c6849308e83e26e611f194f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -695.10309226797449,
        "Y": 753.29906477027441
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "861fa4d2a763425eb3d10aad7f7b4e54",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -454.67047453951466,
        "Y": 183.56852310908113
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "063702d605b14739be940e578a2ff03f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -811.78059386114887,
        "Y": 240.52056932551733
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "39c801c6eb6a4ce188a483d1287db6e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -846.85929503902855,
        "Y": 144.97582098859036
      },
      {
        "ShowGeometry": true,
        "Name": "Number",
        "Id": "5d88f135f1a540f7b4d12acda77d3a60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -657.16458439883843,
        "Y": 208.35094187754112
      },
      {
        "ShowGeometry": true,
        "Name": "pickObjects",
        "Id": "36932540fab7456bbffeea9a8c12f7e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -791.1832704937857,
        "Y": -327.41331352784971
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "e2e01f7242644ea898de2267518bf623",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -983.847442283952,
        "Y": -339.97198480627731
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0edbc5a7862b49d29d89e5a9aef3189d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -827.095544147354,
        "Y": 950.49761312299358
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "afc046f044094f7db9fe4f0d57a73fcb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -642.7627228798998,
        "Y": 816.1690260436153
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "940ec3132be148869f40049eb44b578c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -91.329337717871,
        "Y": -183.73497653327587
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "7896e88012c34cc98965c152e8a713ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -593.2308693552842,
        "Y": 978.13033856702714
      },
      {
        "ShowGeometry": true,
        "Name": "filterPipesByDNandSystemType",
        "Id": "0972ad87508d41f895331fe67fde4da5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 254.46339166802193,
        "Y": 673.48431423504223
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5e5a65c1f0e8410d8fa829edf6ba1414",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13.855392580235502,
        "Y": 927.9040049713708
      },
      {
        "ShowGeometry": true,
        "Name": "Number",
        "Id": "56123f823df44b35abdbe20891c7cefc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12.032590667451245,
        "Y": 763.73623448218609
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "5b976d2ce1f147118f25c0f4d5a5e52c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13.219210825561845,
        "Y": 835.50249996943387
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "646437c5af2f433291fff427a4494f7b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -19.585103441183492,
        "Y": 675.303896861029
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "7a4d471a2ece48359afca04a0d10f55f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 316.85720048606385,
        "Y": 192.75470597989397
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "b237291f81184668b02e8348fc29cede",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -138.1413623243813,
        "Y": -1334.3267710475577
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6777774bca4d4ffaab9f95c2541fb5e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -282.38701159611725,
        "Y": -1336.2169355702683
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "e97e776a4e79440482332d48d86c588c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -436.33071391341036,
        "Y": -1367.1399200397964
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "ce2f5fd13aa740e492370de3b9204c0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -424.10747633658588,
        "Y": -1282.7617071226055
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "13d8974df9104628ad95503ec3851e00",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 359.70720217712932,
        "Y": -1643.5944749404221
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "f7a2a30e228245b1a04bf8e1ca538372",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 83.828406514406765,
        "Y": -1646.9359265887003
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "362181dc022c45f79fda7d469b3cfca6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 31.804050778177043,
        "Y": -951.350988727956
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "8e0b210309244cce830f9e980535126a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -205.8814022928737,
        "Y": -961.25400175955781
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "4e5a4b7f77634e8a8954357082492ec5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -417.13276956513175,
        "Y": -957.80803583242323
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "63151f9397fb49e18dc41d078d104e72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -709.10494321348642,
        "Y": -883.00393817055817
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "35ef701269b44261b4528d88fc6b4d75",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -6.78836865202652,
        "Y": -1114.3831786889057
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b352a7b62c6949b3afd06a44373e0a67",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 634.68971853108087,
        "Y": -864.87491433296475
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "810211b2a17844079bd284420aad8a39",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 442.18297759256347,
        "Y": -905.54535255941221
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "fd7c5666620b4290b5ac8043dc3d5b77",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -161.05412683958386,
        "Y": -1542.132586881376
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1b2a6cc5e638466fa4ded15612d3495f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -305.29977611131989,
        "Y": -1544.022751404086
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "54506452177e4ab29645cc421be138d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -457.7282710101149,
        "Y": -1574.9457358736161
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "88b8dc88eaa549a6a7876c9f5385d423",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -447.02024085178886,
        "Y": -1490.567522956426
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "ee218d55212641a996d7b133bbffdb92",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -544.33381780645527,
        "Y": -1760.2097135245808
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6a8d07e61dd64f84b9d28178c762a8f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -375.10307509671651,
        "Y": -1736.1806153138757
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "40be0a3d7c9247d5b3ca29678d7f583f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -572.95663602247964,
        "Y": -1696.4782329427042
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "7530bfdbb5d84b0182508e460bd1fd05",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -230.85742582498045,
        "Y": -1734.2904507911658
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script From String",
        "Id": "05e4dc06c39e4e2c86e80c81b02b62c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -292.65256230762759,
        "Y": -2237.792404697228
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "60a524b7c72747a98ce08c959c95222b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -436.89821157936461,
        "Y": -2239.6825692199382
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "a257721bf06846c580eae76b16737d24",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -601.4125399202411,
        "Y": -2260.0142040713968
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "6ab1148e905243c381a0a8fba5e8f46d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -634.75177250512752,
        "Y": -2199.980186848758
      },
      {
        "ShowGeometry": true,
        "Name": "pickMultiFaces",
        "Id": "482f9e1345044396aa3a4f5981325699",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -781.40669202960953,
        "Y": -2816.7666499854117
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "4c53749e60e14e3da6af1b08d06c6aac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -601.78031788462806,
        "Y": -2903.4456573281295
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "91ee76bf6e2f4cb18dc3e10825aa432b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -66.410605950932677,
        "Y": -3234.3459936088393
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b3b7b8449e5448fe80a4a5b9904ad8e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -305.35812718060356,
        "Y": -2925.4516244442643
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4e1448a63dcb4a80aa522f58e93a93af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 156.620549600873,
        "Y": -3071.8448175423077
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "03c0336b88e341d8b01d641096c8a634",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5.2015163236772537,
        "Y": -3056.5338462668678
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "97c6d78a93944875905b00d61bc9e007",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -169.16823048542022,
        "Y": -3321.0112890122864
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "aa64e5aee92946868ee14a4613f20df3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 463.13946805036392,
        "Y": -3095.7118610698158
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d7efdb9871a541138c8bc89473555876",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -20.0,
        "Y": -2884.0
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "303c11c3589748f180209e0d98da58a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1021.1151841309695,
        "Y": -3272.9054236236061
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0c33d36f098c472bbcc1be4ca8503f55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 205.0,
        "Y": -3447.0
      },
      {
        "ShowGeometry": true,
        "Name": "Point.ByCoordinates",
        "Id": "b7d45b2980fc445d9673e1720c3a4068",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 432.07270248819674,
        "Y": -3566.4690600820427
      },
      {
        "ShowGeometry": true,
        "Name": "Point.ByCoordinates",
        "Id": "20ace60b60cb4f968abdadbe40fd0bac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 432.29000725343735,
        "Y": -3399.8629171635657
      },
      {
        "ShowGeometry": true,
        "Name": "Line.ByStartPointEndPoint",
        "Id": "81f82dfa87484b92a348d476e1fd3dff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 631.77105162765065,
        "Y": -3546.8907905585666
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "630ed414f04e499793ab360eea3aeac1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 725.16659502013943,
        "Y": -3069.7662402414776
      },
      {
        "ShowGeometry": true,
        "Name": "Curve.EndPoint",
        "Id": "553c002501724bf9b71d551ba89ba02a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 768.94743166333456,
        "Y": -2924.2495271347921
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "09b3782b78824c5c903624b710579785",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -300.91742621956388,
        "Y": -3389.5241674095851
      },
      {
        "ShowGeometry": true,
        "Name": "SelectFaces Data",
        "Id": "b4572c16682c4aee9ffd9dacd0e1e1ab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 72.907593627835212,
        "Y": -3580.2253678178172
      },
      {
        "ShowGeometry": true,
        "Name": "MultipleInputForm ++",
        "Id": "4d97982279da4b84838b743c2029fdba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -281.45780298027216,
        "Y": -4116.59799904652
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "072cde053ed445518a5153c13b30f25b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -330.77482586801227,
        "Y": -3881.3541656931484
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.PruneDuplicates",
        "Id": "cdbf4f498c5e4440a6082cc62e28513b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 115.95673110782946,
        "Y": -2948.2427021099156
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "8f78173a390742a7be54e8542260f76f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -174.07082579138967,
        "Y": -3063.8542823342959
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "0a9904afa8404d6d89cad360345dcd23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -953.22278439267961,
        "Y": -2822.2598941177866
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "eb543f219b8f458ca636b30fb70eeef4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -449.00338972172597,
        "Y": -2736.2404823102652
      },
      {
        "ShowGeometry": true,
        "Name": "Select Face",
        "Id": "536bf5f5dd4b401d88fc570b4aa23c8b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1412.0413957699363,
        "Y": -3627.8325662709371
      },
      {
        "ShowGeometry": true,
        "Name": "pickFaces",
        "Id": "c329a12bdc474291ab26f7d622de7edf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -1287.5209768632869,
        "Y": -3265.6016158749494
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "de34725cb45d4a27b78aabe844cdd363",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1581.0711990640712,
        "Y": -3366.8913086782009
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "e80f26ff0ac4450489961d4920747b06",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -255.64990878930337,
        "Y": -3591.0791479206378
      },
      {
        "ShowGeometry": true,
        "Name": "pickFaces",
        "Id": "3f64c26689b24b20b8fba67c6e0644ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -1069.4785397632963,
        "Y": -3677.7721156246084
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6adbb228d1ab48e78fa45be558112427",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -866.9421118617862,
        "Y": -3668.2068800904453
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "4158a654f2dc49a4a0d2393d5a2affbc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -615.74439402175983,
        "Y": -3576.0960138971755
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b88ca4b57ad6452ab4d81805b1e64997",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1078.3111849077131,
        "Y": -3267.0517145244808
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "e9a43c97814e4448ac409deb5afd84b0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -637.59620602576069,
        "Y": -3266.168793688822
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0afe71361011445ca273be9ddbe70af2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -937.99635093425854,
        "Y": -3275.9270372801275
      },
      {
        "ShowGeometry": true,
        "Name": "Plane.Normal",
        "Id": "11938360f7b84e31a922d689ae5f1387",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -661.80562752689468,
        "Y": -3059.2678088120115
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "60498adda16646ca823c04c37da18859",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1033.5649206996998,
        "Y": -3023.69558923933
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "53486bcff5b7446ca8e04e11866157e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -861.43551821797439,
        "Y": -3029.0274824693965
      },
      {
        "ShowGeometry": true,
        "Name": "pickFaces",
        "Id": "7e33f87fb5aa4a058301aa869a918449",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1392.4720131647553,
        "Y": -3081.3007097426835
      }
    ],
    "Annotations": [
      {
        "Id": "6a88dfd3b8514338a475a975a3d6b1de",
        "Title": "Select Model Elements",
        "Nodes": [
          "b806c7b3690b44a39df21db9d542cbad",
          "8f03552daf6f45f1b156593a009d9954"
        ],
        "Left": -308.91377691614883,
        "Top": 3086.5394853027015,
        "Width": 449.14882940874634,
        "Height": 157.79999999999973,
        "FontSize": 36.0,
        "InitialTop": 3139.7394853027013,
        "InitialHeight": 145.21655038816652,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "84320db853e14743b8a89b6d5de06d6e",
        "Title": "Select Model Element",
        "Nodes": [
          "91bad5f8fd3c42ac96c0880020ea1db1",
          "d0e4e8d8aaf149c79d5e74e189906fd6"
        ],
        "Left": -304.04157472222505,
        "Top": 3362.6924532326816,
        "Width": 433.7355960110317,
        "Height": 159.5863903668801,
        "FontSize": 36.0,
        "InitialTop": 3415.8924532326814,
        "InitialHeight": 146.78639036688037,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "7f4d3eface4c418a90d27e00b489de81",
        "Title": "Get one Face and Line",
        "Nodes": [
          "1d5ea0a6521e4e0db55c849f5638ca66",
          "f0f890775dd8460fbd7de3d039a95f7c",
          "f605c4859458481292ce590bbe919155"
        ],
        "Left": -320.73519867757818,
        "Top": 3576.0633215788453,
        "Width": 758.41481861625016,
        "Height": 192.66398190369728,
        "FontSize": 36.0,
        "InitialTop": 3629.2633215788451,
        "InitialHeight": 179.98778474564597,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "40d94ca968734195a3175d0936f57a1a",
        "Title": "Get Multi Face and Bounding line\r\n",
        "Nodes": [
          "f2755cfe73a04bbca9f1250c14b2d79a",
          "64428c539a11447aa465d2a4cdc90ea7",
          "a8bf8e1bd3484a76b6c7c1df36353a23"
        ],
        "Left": -282.22743163030418,
        "Top": 3973.0973625783759,
        "Width": 758.414818616251,
        "Height": 236.98640375017339,
        "FontSize": 36.0,
        "InitialTop": 4069.4973625783759,
        "InitialHeight": 180.98640375017294,
        "TextblockHeight": 86.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "03971fa35446434eabb2cd48e936051e",
        "Title": "Get Multi Face and Bounding line\r\n",
        "Nodes": [
          "e461836530114b6ebf9794d0fba5fe22",
          "7e894e8322de4992bfb87037f0cf952d"
        ],
        "Left": -277.90038499517937,
        "Top": 4363.2074356224248,
        "Width": 453.38506175796994,
        "Height": 244.20000000000073,
        "FontSize": 36.0,
        "InitialTop": 4502.8074356224251,
        "InitialHeight": 152.85846400654282,
        "TextblockHeight": 129.6,
        "Background": "#FFC1D676"
      },
      {
        "Id": "45643f260b5d489ab6a26dd6510ea8c2",
        "Title": "waitFor",
        "Nodes": [
          "d1fda400c7fa4d548db9745529a91d41"
        ],
        "Left": -305.50925867342517,
        "Top": 4914.2370737091478,
        "Width": 279.2,
        "Height": 155.39999999999964,
        "FontSize": 36.0,
        "InitialTop": 4967.4370737091476,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "df96fc26537344f6a378b0c074156602",
        "Title": "Get Multi Face and Bounding line\r\n",
        "Nodes": [
          "c8168253b7724d7b91e6f7d57b0ef7e3",
          "92c4d1a573e840ca95618ba3e144fe86",
          "3f843941c3554a90b043f89889e224a5"
        ],
        "Left": 723.12168939953085,
        "Top": 4284.9119298275155,
        "Width": 776.128984638377,
        "Height": 236.98640375017021,
        "FontSize": 36.0,
        "InitialTop": 4381.3119298275151,
        "InitialHeight": 193.44563546042173,
        "TextblockHeight": 86.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ebc7edbbc320425fb8d2c6798c2c8ae4",
        "Title": "List Flatten\r\n",
        "Nodes": [
          "697b9ce9724a43318f909061ef2e88d6",
          "65a19d33225c4a39b982f317f3c53dad",
          "8edf4ecfc00346b09a786681f694c3ca",
          "4640c1db49434b91a6c867f820d5b451",
          "e776708e2a75491a9b18e46f9c6dcb2d",
          "018bcdd3558542f5aaa88b1f722c8bc7"
        ],
        "Left": -350.07387041317179,
        "Top": 6162.1988749709308,
        "Width": 1026.9364372894922,
        "Height": 718.56353357984335,
        "FontSize": 36.0,
        "InitialTop": 6258.59887497093,
        "InitialHeight": 662.56353357984335,
        "TextblockHeight": 86.4,
        "Background": "#FFC1D676"
      },
      {
        "Id": "343755b2417840b29c06c530fcf6193d",
        "Title": "IF by code block",
        "Nodes": [
          "85af11ccb5774ada99568c42baf83e6d",
          "36a669b68b94461e93d8c9ee477a5b76"
        ],
        "Left": -343.63130955481938,
        "Top": 5772.721176572516,
        "Width": 848.12022469739054,
        "Height": 372.058858434234,
        "FontSize": 36.0,
        "InitialTop": 5825.9211765725158,
        "InitialHeight": 151.25885843423384,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ab5bf4668feb4f0aa94c5e96b99c6ee1",
        "Title": "VS Code",
        "Nodes": [
          "4a9bc27f68354331ae06f6fe80926fa0",
          "eb192327a5d24ad7854aef5788c531d9",
          "823af2a7e719461ab94c1f12f377e9ec"
        ],
        "Left": -903.32872074868146,
        "Top": 483.849723490067,
        "Width": 648.03934441379977,
        "Height": 330.19095556953454,
        "FontSize": 36.0,
        "InitialTop": 537.049723490067,
        "InitialHeight": 240.59095556953457,
        "TextblockHeight": 43.2,
        "Background": "#FFC1D676"
      },
      {
        "Id": "cccc4e7327364f0e8fd315855e48e8d3",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "ce70da41195c49b0a0ce781d72bb3a4a",
          "87396469d0644adbae8d4ba2f6a566ad",
          "e8ec937ef8a94fbfbc74bba829ab2c79",
          "8d29635ed9ac453f8bb5f57a5f6dc798",
          "03c8e1e3ce72402284cc328ac33328d4",
          "d9d0b0d666ca4fb6a86b6f4e168acfa5"
        ],
        "Left": -430.21593950935505,
        "Top": 2672.1709673729915,
        "Width": 1672.1825622523806,
        "Height": 197.85854502705388,
        "FontSize": 36.0,
        "InitialTop": 2725.3709673729913,
        "InitialHeight": 176.37569545075121,
        "TextblockHeight": 43.2,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "c419a278aefa460989a0b15d6f1cf196",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "81924301647f4b0dbc7cc52a9dca4321",
          "f2f88c364fe2423894234ff2ec0002f1",
          "4090c20d55f64172bfdb659a06109d56"
        ],
        "Left": -476.59046719419189,
        "Top": 2363.6222984370033,
        "Width": 689.74971413006642,
        "Height": 179.33430665470132,
        "FontSize": 36.0,
        "InitialTop": 2416.8222984370032,
        "InitialHeight": 191.97418576447944,
        "TextblockHeight": 43.2,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "a8cff01544cd45aba5ada37f28a2f69b",
        "Title": "pick Points",
        "Nodes": [
          "a2e68794597e4cb390ff856d2864e26b",
          "beaf83b655a24b449d81a844a26c168e",
          "ccb95727e0a14a448ce79a989dbfb91f"
        ],
        "Left": -466.89735869273852,
        "Top": 2129.4914164935581,
        "Width": 741.054313947973,
        "Height": 171.39999999999964,
        "FontSize": 36.0,
        "InitialTop": 2182.6914164935579,
        "InitialHeight": 153.50357694114973,
        "TextblockHeight": 43.2,
        "Background": "#FF848484"
      },
      {
        "Id": "15370d6911034d37b7dab202f720b442",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "bef6bce77bca4fef982d1379eb927f4a",
          "71c31e6f5dfd4c828496ebf20e928dbe"
        ],
        "Left": -609.64742551067593,
        "Top": 1541.5365924429041,
        "Width": 423.65971538418506,
        "Height": 206.96286604238253,
        "FontSize": 36.0,
        "InitialTop": 1637.9365924429042,
        "InitialHeight": 150.96286604238253,
        "TextblockHeight": 86.4,
        "Background": "#FF848484"
      },
      {
        "Id": "a8570f23a0e24ecc9ff6ff08c28ace68",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "0ab710febe524388870be6c23085f10c",
          "6bdfbb4f8f254d98a09120d39a319a11"
        ],
        "Left": -617.0517583051269,
        "Top": 1283.1259125980951,
        "Width": 452.42859873039788,
        "Height": 226.60000000000014,
        "FontSize": 36.0,
        "InitialTop": 1379.5259125980951,
        "InitialHeight": 145.56157354119432,
        "TextblockHeight": 86.4,
        "Background": "#FF848484"
      },
      {
        "Id": "264d5bda67454f579140f223a588486c",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "05e4dc06c39e4e2c86e80c81b02b62c3",
          "60a524b7c72747a98ce08c959c95222b",
          "a257721bf06846c580eae76b16737d24",
          "6ab1148e905243c381a0a8fba5e8f46d"
        ],
        "Left": -644.75177250512752,
        "Top": -2356.4142040713969,
        "Width": 538.09921019749993,
        "Height": 249.83401722263898,
        "FontSize": 36.0,
        "InitialTop": -2260.0142040713968,
        "InitialHeight": 205.03401722263879,
        "TextblockHeight": 86.4,
        "Background": "#FFC1D676"
      }
    ],
    "X": 1789.3737070993134,
    "Y": 3743.2247769261708,
    "Zoom": 1.1356101857535918
  }
}